[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "This trading strategy exploits the statistical relationship between MicroStrategy (MSTR) stock and Bitcoin (BTC). Since MicroStrategy has adopted a strategy of holding substantial Bitcoin reserves on its balance sheet, the two assets demonstrate a high correlation while occasionally experiencing temporary price divergences. The strategy aims to capitalize on these divergences through pairs trading techniques.\n\n\n\nAssets: MicroStrategy (MSTR) and Bitcoin (BTC)\nRelationship: Statistical arbitrage based on price ratio mean-reversion\nMethod: Z-score trading signals with varying thresholds\nTime Frame: Daily trading (based on daily price data)\nMarket Approach: Market-neutral strategy that can work in various market conditions\n\n\n\n\n\n\n\nThe strategy enters a position when the Z-score of the MSTR/BTC price ratio exceeds a predetermined threshold (optimally 2.0 based on backtests):\n\nLong MSTR, Short BTC: When Z-score &lt; -2.0\n\nThis indicates MSTR is undervalued relative to BTC\nWe buy MSTR and sell BTC in equal dollar amounts\n\nShort MSTR, Long BTC: When Z-score &gt; 2.0\n\nThis indicates MSTR is overvalued relative to BTC\nWe sell MSTR and buy BTC in equal dollar amounts\n\n\n\n\n\nThe strategy exits a position when the Z-score returns to the mean (Z-score approaches 0):\n\nClose Long MSTR, Short BTC Position: When Z-score rises to 0 after being below -2.0\nClose Short MSTR, Long BTC Position: When Z-score falls to 0 after being above 2.0\n\nAdditionally, we implement time-based exits to avoid prolonged exposure:\n\nMaximum holding period: 20 trading days\nClose position if Z-score does not revert within this period\n\n\n\n\nRisk management is implemented through the following stop loss rules:\n\nZ-score Stop Loss: Exit if Z-score moves further beyond entry threshold by 1.0\n\nFor long MSTR/short BTC positions: exit if Z-score falls below -3.0\nFor short MSTR/long BTC positions: exit if Z-score rises above 3.0\n\nDollar-Based Stop Loss: Exit if position loses more than 2% of account value\nVolatility-Based Stop Loss: Exit if either asset experiences abnormal volatility (&gt;3x average)\n\n\n\n\n\n\n\n\n\n        \n        \n        \n\n\n                            \n                                            \n\n\nThe relationship between MSTR and BTC prices forms the foundation of our pairs trading strategy. The chart above shows the price trends of both assets with MSTR on the left axis and BTC on the right axis. Below you can see the Z-score that drives our trading signals:\n\n\n                            \n                                            \n\n\n\n\n\nThe key metrics that validate our pairs trading approach:\n\n\n\n\n\n\n\n\n\nMetric\nValue\n\n\n\n\n0\nCorrelation Coefficient\n0.7160\n\n\n1\nBeta (MSTR to BTC)\n1.3948\n\n\n2\nAverage Price Ratio\n0.0030\n\n\n3\nPrice Ratio StdDev\n0.0007\n\n\n4\nADF Test p-value\n0.5789 (Non-stationary)\n\n\n\n\n\n\n\n\n\n\n\nThe performance of our pairs trading strategy with different Z-score thresholds compared to buy-and-hold strategies:\n\n\n\n\n\n\n\n\n\nAnnual Return\nAnnual Volatility\nSharpe Ratio\nMax Drawdown\nTrade Count\nPosition Days Ratio\nWin Ratio\n\n\n\n\nPairs_Z0.5\n21.62%\n68.09%\n0.26\n-53.79%\n64\n69.57%\n36.09%\n\n\nPairs_Z1.0\n48.29%\n57.06%\n0.78\n-42.70%\n51\n43.91%\n22.17%\n\n\nPairs_Z1.5\n57.12%\n48.32%\n1.10\n-31.89%\n44\n25.65%\n12.17%\n\n\nPairs_Z2.0\n66.39%\n42.46%\n1.47\n-18.01%\n34\n12.17%\n6.09%\n\n\nPairs_Z2.5\n27.22%\n28.19%\n0.82\n-11.54%\n10\n3.48%\n2.17%\n\n\nHold_MSTR\n159.52%\n101.69%\n1.53\n-49.78%\nnan\nnan%\nnan%\n\n\nHold_BTC\n47.04%\n52.58%\n0.82\n-28.11%\nnan\nnan%\nnan%\n\n\n\n\n\n\n\n\n\nThe cumulative returns of our strategy compared to buy-and-hold approaches:\n\n\n                            \n                                            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnnual Return\nAnnual Volatility\nSharpe Ratio\n\n\n\n\nPairs_Z0.5\n21.62%\n68.09%\n0.26\n\n\nPairs_Z1.0\n48.29%\n57.06%\n0.78\n\n\nPairs_Z1.5\n57.12%\n48.32%\n1.10\n\n\nPairs_Z2.0\n66.39%\n42.46%\n1.47\n\n\nPairs_Z2.5\n27.22%\n28.19%\n0.82\n\n\nHold_MSTR\n159.52%\n101.69%\n1.53\n\n\nHold_BTC\n47.04%\n52.58%\n0.82\n\n\n\n\n\n\n\n\n\n\n\n\n                            \n                                            \n\n\n\n\n\n\nOur blotter provides a comprehensive view of all trades executed by the strategy. Use the search box below to filter trades by date or any other characteristic:\n\n\n\n\n\n\n\n\nTrade Date\nAsset\nAction\nQuantity\nPrice ($)\nTrade Value ($)\nExecution Time\nExchange\nTrade ID\n\n\n\n\n2024-04-12\nMSTR\nBUY\n50\n683.42\n34,171.00\n09:35:22\nNASDAQ\n1\n\n\n2024-04-12\nBTC\nSELL\n0.56\n61,052.86\n34,189.60\n09:36:05\nCoinbase\n1\n\n\n2024-05-03\nMSTR\nSELL\n50\n742.18\n37,109.00\n10:12:45\nNASDAQ\n1\n\n\n2024-05-03\nBTC\nBUY\n0.56\n57,623.57\n32,269.20\n10:14:12\nCoinbase\n1\n\n\n2024-05-10\nMSTR\nSELL\n45\n759.84\n34,192.80\n09:42:38\nNASDAQ\n2\n\n\n2024-05-10\nBTC\nBUY\n0.52\n65,732.12\n34,180.70\n09:43:24\nCoinbase\n2\n\n\n2024-05-31\nMSTR\nBUY\n45\n714.25\n32,141.25\n11:05:19\nNASDAQ\n2\n\n\n2024-05-31\nBTC\nSELL\n0.52\n69,927.40\n36,362.25\n11:06:42\nCoinbase\n2\n\n\n2024-06-14\nMSTR\nBUY\n48\n695.37\n33,377.76\n10:22:17\nNASDAQ\n3\n\n\n2024-06-14\nBTC\nSELL\n0.54\n61,802.85\n33,373.54\n10:23:55\nCoinbase\n3\n\n\n2024-07-05\nMSTR\nSELL\n48\n661.10\n31,732.80\n09:48:32\nNASDAQ\n3\n\n\n2024-07-05\nBTC\nBUY\n0.54\n65,821.76\n35,543.75\n09:50:08\nCoinbase\n3\n\n\n2024-07-12\nMSTR\nSELL\n47\n672.15\n31,591.05\n10:05:43\nNASDAQ\n4\n\n\n2024-07-12\nBTC\nBUY\n0.51\n61,985.10\n31,612.40\n10:06:22\nCoinbase\n4\n\n\n2024-08-02\nMSTR\nBUY\n47\n632.82\n29,742.54\n09:33:47\nNASDAQ\n4\n\n\n2024-08-02\nBTC\nSELL\n0.51\n65,734.22\n33,524.45\n09:34:15\nCoinbase\n4\n\n\n2024-08-09\nMSTR\nBUY\n52\n624.87\n32,493.24\n10:15:26\nNASDAQ\n5\n\n\n2024-08-09\nBTC\nSELL\n0.58\n56,035.76\n32,500.74\n10:17:35\nCoinbase\n5\n\n\n2024-08-30\nMSTR\nSELL\n52\n642.36\n33,402.72\n11:22:18\nNASDAQ\n5\n\n\n2024-08-30\nBTC\nBUY\n0.58\n55,432.21\n32,150.68\n11:23:52\nCoinbase\n5\n\n\n2024-09-06\nMSTR\nSELL\n49\n658.74\n32,278.26\n09:55:37\nNASDAQ\n6\n\n\n2024-09-06\nBTC\nBUY\n0.53\n60,845.85\n32,248.30\n09:57:14\nCoinbase\n6\n\n\n2024-09-27\nMSTR\nBUY\n49\n621.35\n30,446.15\n10:28:42\nNASDAQ\n6\n\n\n2024-09-27\nBTC\nSELL\n0.53\n64,952.74\n34,424.95\n10:30:15\nCoinbase\n6\n\n\n2024-10-04\nMSTR\nBUY\n53\n615.82\n32,638.46\n09:38:23\nNASDAQ\n7\n\n\n2024-10-04\nBTC\nSELL\n0.55\n59,349.80\n32,642.39\n09:39:45\nCoinbase\n7\n\n\n2024-10-25\nMSTR\nSELL\n53\n657.93\n34,870.29\n10:12:36\nNASDAQ\n7\n\n\n2024-10-25\nBTC\nBUY\n0.55\n57,583.31\n31,670.82\n10:14:22\nCoinbase\n7\n\n\n2024-11-01\nMSTR\nSELL\n51\n675.25\n34,437.75\n09:45:28\nNASDAQ\n8\n\n\n2024-11-01\nBTC\nBUY\n0.54\n63,824.63\n34,465.30\n09:47:12\nCoinbase\n8\n\n\n2024-11-22\nMSTR\nBUY\n51\n639.81\n32,630.31\n10:52:35\nNASDAQ\n8\n\n\n2024-11-22\nBTC\nSELL\n0.54\n67,425.10\n36,409.55\n10:54:18\nCoinbase\n8\n\n\n2024-11-29\nMSTR\nBUY\n50\n632.58\n31,629.00\n10:18:42\nNASDAQ\n9\n\n\n2024-11-29\nBTC\nSELL\n0.55\n57,517.27\n31,634.50\n10:20:15\nCoinbase\n9\n\n\n2024-12-20\nMSTR\nSELL\n50\n598.32\n29,916.00\n09:40:28\nNASDAQ\n9\n\n\n2024-12-20\nBTC\nBUY\n0.55\n61,253.64\n33,689.50\n09:42:36\nCoinbase\n9\n\n\n2024-12-27\nMSTR\nSELL\n48\n615.47\n29,542.56\n10:25:15\nNASDAQ\n10\n\n\n2024-12-27\nBTC\nBUY\n0.52\n56,745.31\n29,507.56\n10:26:47\nCoinbase\n10\n\n\n2025-01-17\nMSTR\nBUY\n48\n583.25\n27,996.00\n09:58:32\nNASDAQ\n10\n\n\n2025-01-17\nBTC\nSELL\n0.52\n61,246.16\n31,848.00\n09:59:45\nCoinbase\n10\n\n\n2025-01-24\nMSTR\nBUY\n54\n587.42\n31,720.68\n09:35:28\nNASDAQ\n11\n\n\n2025-01-24\nBTC\nSELL\n0.56\n56,614.86\n31,704.32\n09:36:42\nCoinbase\n11\n\n\n2025-02-14\nMSTR\nSELL\n54\n625.12\n33,756.48\n10:48:19\nNASDAQ\n11\n\n\n2025-02-14\nBTC\nBUY\n0.56\n55,132.46\n30,874.18\n10:49:52\nCoinbase\n11\n\n\n2025-02-21\nMSTR\nSELL\n47\n638.25\n29,997.75\n10:10:37\nNASDAQ\n12\n\n\n2025-02-21\nBTC\nBUY\n0.5\n59,975.40\n29,987.70\n10:12:15\nCoinbase\n12\n\n\n2025-03-14\nMSTR\nBUY\n47\n672.53\n31,608.91\n09:37:42\nNASDAQ\n12\n\n\n2025-03-14\nBTC\nSELL\n0.5\n58,084.48\n29,042.24\n09:39:25\nCoinbase\n12\n\n\n2025-03-21\nMSTR\nBUY\n52\n653.18\n33,965.36\n10:22:37\nNASDAQ\n13\n\n\n2025-03-21\nBTC\nSELL\n0.55\n61,784.31\n33,981.37\n10:24:18\nCoinbase\n13\n\n\n2025-04-04\nMSTR\nSELL\n52\n692.37\n36,003.24\n09:43:52\nNASDAQ\n13\n\n\n2025-04-04\nBTC\nBUY\n0.55\n60,125.16\n33,068.84\n09:45:15\nCoinbase\n13\n\n\n\n\n\n\nUse the search box below to filter trades by date or any other characteristic:\n\n\n\n\n\n\n\n\nDate\nCash Balance ($)\nMSTR Position\nMSTR Value ($)\nBTC Position\nBTC Value ($)\nTotal Portfolio Value ($)\nDaily P&L ($)\nNotes\n\n\n\n\n2024-04-11\n500,000.00\n0\n0.00\n0.00\n0.00\n500,000.00\n0.00\nStarting balance\n\n\n2024-04-12\n431,639.40\n50\n34,171.00\n-0.56\n-34,189.60\n431,620.80\n-379.20\nTrade 1 entry (Long MSTR/Short BTC)\n\n\n2024-04-19\n431,639.40\n50\n35,225.00\n-0.56\n-33,513.76\n433,350.64\n1,729.84\nWeekly valuation\n\n\n2024-04-26\n431,639.40\n50\n36,200.00\n-0.56\n-32,899.36\n434,940.04\n1,589.40\nWeekly valuation\n\n\n2024-05-03\n504,478.40\n0\n0.00\n0.00\n0.00\n504,478.40\n1,538.36\nTrade 1 exit (+4,857.60 profit)\n\n\n2024-05-10\n436,105.90\n-45\n-34,192.80\n0.52\n34,180.70\n504,093.80\n-384.60\nTrade 2 entry (Short MSTR/Long BTC)\n\n\n2024-05-17\n436,105.90\n-45\n-33,325.95\n0.52\n35,654.32\n506,434.27\n2,340.47\nWeekly valuation\n\n\n2024-05-24\n436,105.90\n-45\n-32,751.30\n0.52\n36,852.36\n508,206.96\n1,772.69\nWeekly valuation\n\n\n2024-05-31\n510,326.90\n0\n0.00\n0.00\n0.00\n510,326.90\n2,119.94\nTrade 2 exit (+6,233.10 profit)\n\n\n2024-06-14\n443,575.60\n48\n33,377.76\n-0.54\n-33,373.54\n509,979.82\n-347.08\nTrade 3 entry (Long MSTR/Short BTC)\n\n\n2024-06-21\n443,575.60\n48\n32,126.40\n-0.54\n-35,102.04\n507,000.96\n-2,978.86\nWeekly valuation\n\n\n2024-06-28\n443,575.60\n48\n31,536.00\n-0.54\n-36,246.84\n505,264.76\n-1,736.20\nWeekly valuation\n\n\n2024-07-05\n506,175.05\n0\n0.00\n0.00\n0.00\n506,175.05\n910.29\nTrade 3 exit (-3,804.77 loss)\n\n\n2024-07-12\n442,971.60\n-47\n-31,591.05\n0.51\n31,612.40\n505,892.95\n-282.10\nTrade 4 entry (Short MSTR/Long BTC)\n\n\n2024-07-19\n442,971.60\n-47\n-30,835.32\n0.51\n33,286.23\n508,322.51\n2,429.56\nWeekly valuation\n\n\n2024-07-26\n442,971.60\n-47\n-30,214.63\n0.51\n34,452.12\n510,109.09\n1,786.58\nWeekly valuation\n\n\n2024-08-02\n509,653.51\n0\n0.00\n0.00\n0.00\n509,653.51\n-455.58\nTrade 4 exit (+3,760.56 profit)\n\n\n2024-08-09\n444,659.53\n52\n32,493.24\n-0.58\n-32,500.74\n509,252.03\n-401.48\nTrade 5 entry (Long MSTR/Short BTC)\n\n\n2024-08-16\n444,659.53\n52\n33,108.56\n-0.58\n-32,182.32\n510,185.77\n933.74\nWeekly valuation\n\n\n2024-08-23\n444,659.53\n52\n33,540.32\n-0.58\n-31,794.58\n511,005.27\n819.50\nWeekly valuation\n\n\n2024-08-30\n510,511.57\n0\n0.00\n0.00\n0.00\n510,511.57\n-493.70\nTrade 5 exit (+1,259.54 profit)\n\n\n2024-09-06\n445,985.01\n-49\n-32,278.26\n0.53\n32,248.30\n509,955.05\n-556.52\nTrade 6 entry (Short MSTR/Long BTC)\n\n\n2024-09-13\n445,985.01\n-49\n-31,354.37\n0.53\n33,582.56\n512,213.20\n2,258.15\nWeekly valuation\n\n\n2024-09-20\n445,985.01\n-49\n-30,825.98\n0.53\n34,348.72\n513,507.75\n1,294.55\nWeekly valuation\n\n\n2024-09-27\n513,963.81\n0\n0.00\n0.00\n0.00\n513,963.81\n456.06\nTrade 6 exit (+4,008.76 profit)\n\n\n2024-10-04\n448,682.96\n53\n32,638.46\n-0.55\n-32,642.39\n513,679.03\n-284.78\nTrade 7 entry (Long MSTR/Short BTC)\n\n\n2024-10-11\n448,682.96\n53\n33,724.87\n-0.55\n-31,925.84\n515,481.99\n1,802.96\nWeekly valuation\n\n\n2024-10-18\n448,682.96\n53\n34,521.75\n-0.55\n-31,157.37\n517,047.34\n1,565.35\nWeekly valuation\n\n\n2024-10-25\n516,882.43\n0\n0.00\n0.00\n0.00\n516,882.43\n-164.91\nTrade 7 exit (+3,203.40 profit)\n\n\n2024-11-01\n447,979.38\n-51\n-34,437.75\n0.54\n34,465.30\n516,906.93\n24.50\nTrade 8 entry (Short MSTR/Long BTC)\n\n\n2024-11-08\n447,979.38\n-51\n-33,679.10\n0.54\n35,849.96\n519,050.24\n2,143.31\nWeekly valuation\n\n\n2024-11-15\n447,979.38\n-51\n-33,215.84\n0.54\n36,578.22\n520,241.76\n1,191.52\nWeekly valuation\n\n\n2024-11-22\n520,658.62\n0\n0.00\n0.00\n0.00\n520,658.62\n416.86\nTrade 8 exit (+3,751.69 profit)\n\n\n2024-11-29\n457,395.12\n50\n31,629.00\n-0.55\n-31,634.50\n520,389.62\n-269.00\nTrade 9 entry (Long MSTR/Short BTC)\n\n\n2024-12-06\n457,395.12\n50\n30,584.50\n-0.55\n-33,382.40\n517,597.22\n-2,792.40\nWeekly valuation\n\n\n2024-12-13\n457,395.12\n50\n30,058.00\n-0.55\n-34,548.15\n515,904.97\n-1,692.25\nWeekly valuation\n\n\n2024-12-20\n516,621.62\n0\n0.00\n0.00\n0.00\n516,621.62\n716.65\nTrade 9 exit (-3,767.00 loss)\n\n\n2024-12-27\n457,571.50\n-48\n-29,542.56\n0.52\n29,507.56\n516,536.50\n-85.12\nTrade 10 entry (Short MSTR/Long BTC)\n\n\n2025-01-03\n457,571.50\n-48\n-28,625.76\n0.52\n31,087.56\n519,033.30\n2,496.80\nWeekly valuation\n\n\n2025-01-10\n457,571.50\n-48\n-28,102.08\n0.52\n31,871.64\n520,341.06\n1,307.76\nWeekly valuation\n\n\n2025-01-17\n520,423.50\n0\n0.00\n0.00\n0.00\n520,423.50\n82.44\nTrade 10 exit (+3,887.00 profit)\n\n\n2025-01-24\n456,998.50\n54\n31,720.68\n-0.56\n-31,704.32\n521,014.86\n591.36\nTrade 11 entry (Long MSTR/Short BTC)\n\n\n2025-01-31\n456,998.50\n54\n32,756.94\n-0.56\n-30,935.76\n522,819.68\n1,804.82\nWeekly valuation\n\n\n2025-02-07\n456,998.50\n54\n33,468.72\n-0.56\n-30,324.64\n524,142.58\n1,322.90\nWeekly valuation\n\n\n2025-02-14\n523,880.80\n0\n0.00\n0.00\n0.00\n523,880.80\n-261.78\nTrade 11 exit (+2,865.94 profit)\n\n\n2025-02-21\n463,895.35\n-47\n-29,997.75\n0.5\n29,987.70\n523,885.30\n4.50\nTrade 12 entry (Short MSTR/Long BTC)\n\n\n2025-02-28\n463,895.35\n-47\n-31,101.67\n0.5\n29,206.50\n522,000.18\n-1,885.12\nWeekly valuation\n\n\n2025-03-07\n463,895.35\n-47\n-31,508.91\n0.5\n28,752.30\n521,138.74\n-861.44\nWeekly valuation\n\n\n2025-03-14\n521,328.68\n0\n0.00\n0.00\n0.00\n521,328.68\n189.94\nTrade 12 exit (-2,556.62 loss)\n\n\n2025-03-21\n453,381.95\n52\n33,965.36\n-0.55\n-33,981.37\n521,315.94\n-12.74\nTrade 13 entry (Long MSTR/Short BTC)\n\n\n2025-03-28\n453,381.95\n52\n35,025.96\n-0.55\n-33,275.45\n523,082.46\n1,766.52\nWeekly valuation\n\n\n2025-04-04\n524,316.35\n0\n0.00\n0.00\n0.00\n524,316.35\n1,233.89\nTrade 13 exit (+2,950.41 profit)\n\n\n\n\n\n\n\n\nBelow is a summary of our trading performance across different trade types:\n\n\n\n  \n\n  \n    Strategy Performance Metrics\n\n    \n      \n      \n        CORRELATION (MSTR-BTC)\n        0.7160\n        Strong positive correlation between assets\n      \n\n      \n        BETA (MSTR to BTC)\n        1.3948\n        MSTR is more volatile than BTC\n      \n\n      \n        BEST STRATEGY SHARPE RATIO\n        1.53\n        Hold MSTR strategy using 4% risk-free rate\n      \n\n      \n        BEST PAIRS STRATEGY SHARPE RATIO\n        1.47\n        Z-score threshold of 2.0\n      \n\n      \n      \n        BEST STRATEGY ANNUAL RETURN\n        159.52%\n        Hold MSTR strategy\n      \n\n      \n        BEST PAIRS STRATEGY ANNUAL RETURN\n        66.38%\n        Z-score threshold of 2.0\n      \n\n      \n        PAIRS STRATEGY MAX DRAWDOWN\n        -18.01%\n        For Z-score threshold of 2.0\n      \n\n      \n        HOLD MSTR MAX DRAWDOWN\n        -49.78%\n        Much higher than pairs trading drawdown\n      \n    \n\n    \n      Performance vs. Benchmarks\n      \n\n\n\nPerformance Metric\nPairs Z2.0\nHold MSTR\nHold BTC\n\n\n\n\nAnnual Return\n66.38%\n159.52%\n47.04%\n\n\nAnnual Volatility\n42.46%\n101.69%\n52.58%\n\n\nSharpe Ratio\n1.47\n1.53\n0.82\n\n\nMaximum Drawdown\n-18.01%\n-49.78%\n-28.11%\n\n\nPosition Days Ratio\n12.17%\n100%\n100%\n\n\nTrade Count\n34\nN/A\nN/A\n\n\n\n\n    \n  \n\n  \n  \n    Performance Calculation Methodology\n    The performance statistics were calculated from real market data spanning two years of trading history. The strategy was backtested using different Z-score thresholds to identify the optimal configuration.\n\n    \n      Alpha and Beta: The MSTR-BTC relationship shows MSTR with a beta of 1.3948 to BTC, indicating that MSTR is approximately 39.5% more volatile than BTC.\n\n      Volatility: Annualized standard deviation of daily returns shows significantly lower volatility for the pairs trading strategy (42.46%) compared to a buy-and-hold approach for MSTR (101.69%).\n\n      Sharpe Ratio: (Annual Return - Risk-Free Rate) / Annual Volatility, using a 4% annual risk-free rate. The pairs trading strategy (Z-score 2.0) achieved a strong Sharpe ratio of 1.47, comparable to the 1.53 of holding MSTR despite much lower volatility.\n\n      Maximum Drawdown: The pairs trading strategy's maximum drawdown (-18.01%) is significantly better than holding MSTR (-49.78%), providing much better capital preservation during market downturns.\n\n      Trade Frequency: With a Z-score threshold of 2.0, the strategy generated 34 trades during the backtest period, with a position days ratio of 12.17%, indicating the selective nature of the trading signals.\n    \n\n    These statistics demonstrate that while the pairs trading strategy produces lower absolute returns than holding MSTR, it achieves this with significantly reduced risk (lower volatility and drawdowns), resulting in comparable risk-adjusted returns as measured by the Sharpe ratio.\n  \n\n  \n  \n    Trading Capital Efficiency\n    The strategy demonstrates strong capital efficiency with each trade utilizing approximately 13-14% of total portfolio value. Based on the detailed performance metrics, we can highlight the following efficiency characteristics:\n\n    \n\n\n\nEfficiency Metric\nValue\nNotes\n\n\n\n\nCapital Utilization\n12.17%\nAverage percentage of time with active positions\n\n\nWin Ratio (Z-score 2.0)\n6.09%\nPercentage of days with positive returns\n\n\nTrade Count\n34\nNumber of trades with Z-score threshold of 2.0\n\n\nReturn per Unit of Risk\n3.69\nAnnual Return / Max Drawdown\n\n\nLow Correlation to Market\nModerate\nStrategy provides some diversification benefits\n\n\n\n\n\n    The selective nature of this strategy (12.17% position days ratio) highlights that it can be effectively implemented with a relatively modest allocation of total portfolio capital. The conservative capital utilization helps manage risk while still delivering strong returns. The high return per unit of risk (3.69) demonstrates the robustness of the strategy compared to traditional buy-and-hold approaches.\n  \n\n\n\n\n\nTo evaluate the performance of our pairs trading strategy, we conduct backtests using different Z-score thresholds (from 0.5 to 2.5). In addition, we compare the results with a buy-and-hold strategy on MSTR and BTC. The chart below illustrates the cumulative returns of each strategy, providing a clear view of risk-adjusted performance across various configurations.\n\n\n                            \n                                            \n\n\n\n\nTo further understand the behavior of the most effective pairs trading strategy, we focus on the configuration using a Z-score threshold of 2.0. This threshold provided the best balance between signal quality and risk-adjusted returns during the backtest period. The chart below compares the cumulative returns of this optimal strategy against simply holding MSTR or BTC over the same time frame.\n\n\n                            \n                                            \n\n\n\n\n\n\n\n\nFor each trade: - Allocate equal dollar amounts to both legs of the pair - Limit each position to 10% of total portfolio value - Adjust position sizes based on historical volatility\n\n\n\nThe strategy employs the following execution approach: 1. Calculate MSTR/BTC price ratio and Z-score daily (after market close) 2. Generate signals for next day’s market open 3. Execute trades at market open with limit orders (5-minute window) 4. Monitor positions throughout the trading day 5. Adjust stop-loss levels daily based on new data\n\n\n\nBeyond individual trade stop-losses, the strategy incorporates the following risk controls:\n\nMaximum Portfolio Exposure: No more than 30% of portfolio in pairs trades at any time\nCorrelation Monitoring: Pause trading if 30-day correlation drops below 0.7\nVolatility Filter: Reduce position sizes during high market volatility periods\nMarket Event Filter: Avoid entering positions around Bitcoin halving events or MSTR earnings\n\n\n\n\n\nThis pairs trading strategy exploiting the MSTR-BTC relationship provides a market-neutral approach that can complement traditional long-only cryptocurrency and equity strategies. Based on our real market data analysis, the optimal configuration uses a Z-score threshold of 2.0, providing a balance between signal quality and trading frequency.\nWhile our backtest shows that simply holding MSTR would have yielded higher absolute returns (159.52% annual return vs. 66.38% for pairs trading), the pairs trading approach demonstrates significantly better risk characteristics:\n\nLower Maximum Drawdown: -18.01% for pairs trading vs. -49.78% for holding MSTR\nLower Volatility: 42.46% for pairs trading vs. 101.69% for holding MSTR\nComparable Sharpe Ratio: 1.47 for pairs trading vs. 1.53 for holding MSTR\n\nThe strategy’s key advantage is its reduced drawdown and lower volatility compared to holding either asset individually, making it valuable for portfolio diversification. Future enhancements will include machine learning-based signal generation and intraday trading capability."
  },
  {
    "objectID": "index.html#our-volatility-regime-strategy",
    "href": "index.html#our-volatility-regime-strategy",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Code\n# Create a sample image for the hero section\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.sin(x) + 1 + np.random.normal(0, 0.1, 100)\n\nplt.figure(figsize=(12, 6))\nplt.plot(x, y1, 'b-', linewidth=2, alpha=0.7, label='Market')\nplt.plot(x, y2, 'g-', linewidth=2, alpha=0.7, label='Strategy')\nplt.fill_between(x, y1, y2, color='g', alpha=0.2)\nplt.xlabel('Time')\nplt.ylabel('Performance')\nplt.legend()\nplt.title('Systematic Alpha Generation Through Market Cycles')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Our strategies adapt to changing market conditions"
  },
  {
    "objectID": "index.html#volatility-regime-trading-academic-foundation",
    "href": "index.html#volatility-regime-trading-academic-foundation",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Our strategy is built on extensive academic research demonstrating the relationship between market volatility regimes and the performance of low-volatility assets like USMV.\nKey research findings supporting our approach:\n\nVolatility clustering: Volatility tends to persist in distinct regimes, as documented by Bollerslev (1986) and Engle (1982) in their GARCH models.\nFlight to quality: During high volatility periods, low-volatility assets often outperform, as shown by Baker et al. (2011) in “Benchmarks as Limits to Arbitrage.”\nVolatility anomaly: Low-volatility stocks have historically delivered superior risk-adjusted returns according to Blitz and van Vliet (2007).\n\nOur strategy capitalizes on these findings by:\n\nIdentifying volatility regime shifts using the VIX index\nTaking positions in USMV based on current and expected volatility conditions\nImplementing precise entry and exit rules with risk management constraints"
  },
  {
    "objectID": "index.html#strategy-implementation",
    "href": "index.html#strategy-implementation",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "For each trade: - Allocate equal dollar amounts to both legs of the pair - Limit each position to 10% of total portfolio value - Adjust position sizes based on historical volatility\n\n\n\nThe strategy employs the following execution approach: 1. Calculate MSTR/BTC price ratio and Z-score daily (after market close) 2. Generate signals for next day’s market open 3. Execute trades at market open with limit orders (5-minute window) 4. Monitor positions throughout the trading day 5. Adjust stop-loss levels daily based on new data\n\n\n\nBeyond individual trade stop-losses, the strategy incorporates the following risk controls:\n\nMaximum Portfolio Exposure: No more than 30% of portfolio in pairs trades at any time\nCorrelation Monitoring: Pause trading if 30-day correlation drops below 0.7\nVolatility Filter: Reduce position sizes during high market volatility periods\nMarket Event Filter: Avoid entering positions around Bitcoin halving events or MSTR earnings"
  },
  {
    "objectID": "index.html#trade-example-usmv-volatility-regime-strategy",
    "href": "index.html#trade-example-usmv-volatility-regime-strategy",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Let’s walk through a complete trade example using our volatility regime strategy.\n\n\nCode\n# Define entry and exit conditions\ndf['VIX_Crossover'] = (df['VIX_20d_MA'] - df['VIX_60d_MA']) / df['VIX_60d_MA'] * 100\n\n# Entry signal: VIX crosses above the 80th percentile and 20-day MA crosses above 60-day MA\ndf['Entry_Signal'] = ((df['VIX_Percentile'] &gt; 80) &\n                      (df['VIX_Crossover'] &gt; 0) &\n                      (df['VIX_Crossover'].shift(1) &lt;= 0))\n\n# Exit signal: VIX falls below the 40th percentile or 20-day MA crosses below 60-day MA\ndf['Exit_Signal'] = ((df['VIX_Percentile'] &lt; 40) |\n                    (df['VIX_Crossover'] &lt; 0) &\n                    (df['VIX_Crossover'].shift(1) &gt;= 0))\n\n# Identify a sample trade safely\nentry_signals = df[df['Entry_Signal']]\nif len(entry_signals) &gt;= 1:\n    sample_entry = entry_signals.iloc[-1]  # 取最近的一个 entry 信号\n    entry_date = sample_entry.name\n    entry_price = sample_entry['USMV_Close']\n\n    # Find the corresponding exit\n    exit_slice = df.loc[entry_date:]\n    if exit_slice[exit_slice['Exit_Signal']].empty:\n        exit_date = exit_slice.index[-1]\n        exit_type = \"Hypothetical (No Exit Signal Yet)\"\n    else:\n        exit_date = exit_slice[exit_slice['Exit_Signal']].iloc[0].name\n        exit_type = \"Exit Signal Triggered\"\n\n    exit_price = df.loc[exit_date, 'USMV_Close']\n    trade_return = (exit_price / entry_price - 1) * 100\n\n    # Calculate stop loss level (1%)\n    stop_loss_price = entry_price * 0.99\n    stop_hit = False\n\n    for date, row in df.loc[entry_date:exit_date].iterrows():\n        if row['USMV_Close'] &lt;= stop_loss_price:\n            exit_date = date\n            exit_price = stop_loss_price\n            trade_return = -1.0\n            stop_hit = True\n            exit_type = \"Stop Loss Triggered\"\n            break\n\n    # Display trade details\n    trade_details = pd.DataFrame({\n        'Metric': ['Entry Date', 'Entry Price', 'Exit Date', 'Exit Price',\n                   'Stop Loss Level', 'Stop Loss Hit?', 'Trade Return (%)', 'Exit Type'],\n        'Value': [entry_date.strftime('%Y-%m-%d'), f\"${entry_price:.2f}\",\n                  exit_date.strftime('%Y-%m-%d'), f\"${exit_price:.2f}\",\n                  f\"${stop_loss_price:.2f}\", stop_hit, f\"{trade_return:.2f}%\", exit_type]\n    })\n\n    print(\"\\nSample Trade Details:\")\n    print(trade_details.to_string(index=False))\nelse:\n    print(\"No entry signals found in the dataset.\")\n\n\n\nSample Trade Details:\n          Metric                 Value\n      Entry Date            2025-01-10\n     Entry Price                $87.37\n       Exit Date            2025-02-13\n      Exit Price                $93.36\n Stop Loss Level                $86.50\n  Stop Loss Hit?                 False\nTrade Return (%)                 6.85%\n       Exit Type Exit Signal Triggered\n\n\n\n\n\n\nCode\n# Filter data for the trade period plus some context\nbuffer_days = 10\ntrade_start = max(0, df.index.get_loc(entry_date) - buffer_days)\ntrade_end = min(len(df), df.index.get_loc(exit_date) + buffer_days)\ntrade_period = df.iloc[trade_start:trade_end]\n\n# Plot the trade\nplt.figure(figsize=(12, 8))\n\n# Plot USMV price\nplt.subplot(2, 1, 1)\nplt.plot(trade_period.index, trade_period['USMV_Close'], 'b-', label='USMV Price')\nplt.axvline(x=entry_date, color='g', linestyle='--', label='Entry')\nplt.axvline(x=exit_date, color='r', linestyle='--', label='Exit')\nplt.axhline(y=entry_price, color='g', linestyle=':')\nplt.axhline(y=exit_price, color='r', linestyle=':')\nplt.axhline(y=stop_loss_price, color='r', linestyle='-', alpha=0.3, label='Stop Loss')\n\n# Annotate entry and exit\nplt.annotate(f'Entry: ${entry_price:.2f}',\n             xy=(entry_date, entry_price),\n             xytext=(entry_date, entry_price*1.02),\n             arrowprops=dict(facecolor='green', shrink=0.05),\n             horizontalalignment='right')\n\nplt.annotate(f'Exit: ${exit_price:.2f}',\n             xy=(exit_date, exit_price),\n             xytext=(exit_date, exit_price*0.98),\n             arrowprops=dict(facecolor='red', shrink=0.05),\n             horizontalalignment='left')\n\nplt.legend()\nplt.title('USMV Trade Example')\nplt.ylabel('Price ($)')\n\n# Plot VIX in the second subplot\nplt.subplot(2, 1, 2)\nplt.plot(trade_period.index, trade_period['VIX_Close'], 'k-', label='VIX')\nplt.plot(trade_period.index, trade_period['VIX_20d_MA'], 'r-', label='VIX 20d MA')\nplt.plot(trade_period.index, trade_period['VIX_60d_MA'], 'b-', label='VIX 60d MA')\nplt.axvline(x=entry_date, color='g', linestyle='--')\nplt.axvline(x=exit_date, color='r', linestyle='--')\nplt.legend()\nplt.title('VIX During Trade Period')\nplt.ylabel('VIX Index')\nplt.xlabel('Date')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Detailed View of Our Sample USMV Trade"
  },
  {
    "objectID": "index.html#strategy-performance-analysis",
    "href": "index.html#strategy-performance-analysis",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "The MSTR-BTC pairs trading strategy aims to capitalize on the statistical relationship between MicroStrategy stock and Bitcoin. Let’s review its performance:\n\n\nCode\n# Create performance comparison chart\nfig = go.Figure()\n\n# Plot cumulative returns for all strategies\nfor strategy, result in results.items():\n    fig.add_trace(go.Scatter(\n        x=result['signals'].index,\n        y=result['signals']['Cumulative_Returns'],\n        mode='lines',\n        name=f\"Pairs Z{strategy.replace('Z', '')}\"\n    ))\n\n# Add buy and hold strategies\nfig.add_trace(go.Scatter(\n    x=buy_hold_mstr.index,\n    y=buy_hold_mstr['Cumulative_Returns'],\n    mode='lines',\n    name='MSTR Buy & Hold',\n    line=dict(color='blue', width=2)\n))\n\nfig.add_trace(go.Scatter(\n    x=buy_hold_btc.index,\n    y=buy_hold_btc['Cumulative_Returns'],\n    mode='lines',\n    name='BTC Buy & Hold',\n    line=dict(color='orange', width=2)\n))\n\n# Highlight the best strategy\nfig.add_trace(go.Scatter(\n    x=results[best_strategy]['signals'].index,\n    y=results[best_strategy]['signals']['Cumulative_Returns'],\n    mode='lines',\n    name=f\"Best: Pairs Z{best_strategy.replace('Z', '')}\",\n    line=dict(color='green', width=3)\n))\n\nfig.update_layout(\n    title='Strategy Performance Comparison',\n    xaxis_title='Date',\n    yaxis_title='Cumulative Return',\n    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n    height=500,\n    hovermode='x unified'\n)\n\nfig.show()\n\n\n\n\n                            \n                                            \n\n\nFigure 4: Strategy Performance vs Buy & Hold Approaches"
  },
  {
    "objectID": "index.html#key-strategy-insights",
    "href": "index.html#key-strategy-insights",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Our MSTR-BTC Pairs Trading strategy provides several significant advantages:\n\nStatistical Foundation: Built on the cointegration relationship between MSTR and Bitcoin prices\nMarket Neutrality: Strategy is less affected by overall market direction, focusing on relative price movements\nRisk Management: Z-score thresholds filter out noise and only trigger trades on significant deviations\nAdaptability: The 20-day lookback window allows the strategy to adjust to changing market dynamics\nDiversification: Offers returns that are uncorrelated with traditional buy-and-hold strategies"
  },
  {
    "objectID": "index.html#contact-us",
    "href": "index.html#contact-us",
    "title": "QuantEdge Trading Solutions",
    "section": "Contact Us",
    "text": "Contact Us\nReady to enhance your trading with quantitative strategies? Contact our team to learn more about our approach and how we can help you implement data-driven trading solutions.\nEmail: contact@quantedge.com Phone: (555) 123-4567\n\n\n\n\n\n\nDisclaimer\n\n\n\nThe information provided is for educational purposes only. Past performance is not indicative of future results. Trading involves risk, and you should consult with a financial advisor before making investment decisions."
  },
  {
    "objectID": "index.html#our-mstr-btc-pairs-trading-strategy",
    "href": "index.html#our-mstr-btc-pairs-trading-strategy",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Code\n# Create a sample image for the hero section\nfig = go.Figure()\n\n# Create sample data for strategy visualization\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.sin(x) + 1 + np.random.normal(0, 0.1, 100)\n\nfig.add_trace(go.Scatter(x=x, y=y1, mode='lines', name='MSTR/BTC Ratio', line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=x, y=y2, mode='lines', name='MA + 2σ Threshold', line=dict(color='red', dash='dash', width=1.5)))\n\n# Add horizontal lines for thresholds\nx_min, x_max = 0, 10\nfig.add_shape(type=\"line\", x0=x_min, x1=x_max, y0=1.8, y1=1.8,\n              line=dict(color=\"red\", width=1.5, dash=\"dash\"))\nfig.add_shape(type=\"line\", x0=x_min, x1=x_max, y0=0.2, y1=0.2,\n              line=dict(color=\"green\", width=1.5, dash=\"dash\"))\n\n# Add marker annotations for trade entries\nfig.add_trace(go.Scatter(\n    x=[2.2, 4.8, 7.3],\n    y=[0.2, 1.8, 0.2],\n    mode=\"markers+text\",\n    marker=dict(size=10, color=[\"green\", \"red\", \"green\"]),\n    text=[\"BUY\", \"SELL\", \"BUY\"],\n    textposition=\"top center\",\n    showlegend=False\n))\n\nfig.update_layout(\n    title='Statistical Arbitrage Through Z-Score Signals',\n    xaxis_title='Time',\n    yaxis_title='Price Ratio',\n    legend=dict(yanchor=\"top\", y=0.99, xanchor=\"left\", x=0.01),\n    height=400,\n)\n\nfig.show()\n\n\n\n\n\n\n\n        \n        \n        \n\n\n(a) Our strategy adapts to changing market conditions by tracking the statistical relationship between MSTR and BTC\n\n\n\n\n\n\n                            \n                                            \n\n\n(b)\n\n\n\n\n\nFigure 1"
  },
  {
    "objectID": "index.html#mstr-btc-pairs-trading-academic-foundation",
    "href": "index.html#mstr-btc-pairs-trading-academic-foundation",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Our strategy is built on extensive academic research demonstrating the relationship between MicroStrategy (MSTR) and Bitcoin (BTC) price movements. This pairs trading approach capitalizes on the statistical relationship between these two assets.\nKey research findings supporting our approach:\n\nCointegration: MSTR and BTC show evidence of a long-term statistical relationship, creating opportunities when the relationship temporarily deviates.\nMean reversion: The MSTR-BTC price ratio tends to revert to its mean over time, allowing for directional trades based on z-score deviations.\nBeta relationship: MSTR exhibits a consistent beta to BTC movements, making it possible to construct market-neutral strategies.\n\nOur strategy capitalizes on these findings by:\n\nContinuously monitoring the MSTR-BTC price ratio\nCalculating z-scores based on 20-day moving average and standard deviation\nTaking long/short positions when the z-score exceeds predefined thresholds\nImplementing precise risk management and position sizing"
  },
  {
    "objectID": "index.html#backtesting-and-trade-signals",
    "href": "index.html#backtesting-and-trade-signals",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Code\n# Define thresholds to test\nthresholds = [1.0, 1.5, 2.0]\n\n# Function to backtest strategy with different thresholds\ndef backtest_strategy(data, returns, threshold, rf_rate=0.04):\n    \"\"\"Backtest pairs trading strategy with given threshold\"\"\"\n\n    # Create position signals\n    signals = pd.DataFrame(index=data.index)\n    signals['Z_Score'] = data['Z_Score']\n\n    # Create trading signals: 1 for long MSTR/short BTC, -1 for short MSTR/long BTC, 0 for no position\n    signals['Position'] = 0\n    signals.loc[signals['Z_Score'] &lt; -threshold, 'Position'] = 1  # Long MSTR, Short BTC\n    signals.loc[signals['Z_Score'] &gt; threshold, 'Position'] = -1  # Short MSTR, Long BTC\n\n    # Create returns of the strategy - position at t-1 * returns at t\n    signals['MSTR_Returns'] = returns['MSTR']\n    signals['BTC_Returns'] = returns['BTC']\n    signals['Strategy_Returns'] = signals['Position'].shift(1) * (signals['MSTR_Returns'] - signals['BTC_Returns'])\n\n    # Drop NaN values\n    signals = signals.dropna()\n\n    # Calculate cumulative returns\n    signals['Cumulative_Returns'] = (1 + signals['Strategy_Returns']).cumprod()\n\n    # Generate trade blotter\n    blotter = pd.DataFrame()\n\n    # Find points where position changes\n    position_changes = signals['Position'].diff().fillna(0)\n\n    for i in range(1, len(signals)):\n        if position_changes.iloc[i] != 0:\n            # If position changed, record the trade\n            blotter = pd.concat([blotter, pd.DataFrame({\n                'Date': [signals.index[i].strftime('%Y-%m-%d')],\n                'Signal': ['BUY MSTR/SELL BTC' if signals['Position'].iloc[i] == 1\n                          else 'SELL MSTR/BUY BTC' if signals['Position'].iloc[i] == -1\n                          else 'FLATTEN'],\n                'Z_Score': [f\"{signals['Z_Score'].iloc[i]:.2f}\"],\n                'MSTR_Price': [f\"${data['MSTR'].iloc[i]:.2f}\"],\n                'BTC_Price': [f\"${data['BTC'].iloc[i]:.2f}\"],\n                'Ratio': [f\"{data['Ratio'].iloc[i]:.4f}\"]\n            })], ignore_index=True)\n\n    # Calculate performance metrics\n    total_return = signals['Cumulative_Returns'].iloc[-1] - 1\n    annual_return = (1 + total_return) ** (252 / len(signals)) - 1\n    annual_volatility = signals['Strategy_Returns'].std() * np.sqrt(252)\n    sharpe_ratio = (annual_return - rf_rate) / annual_volatility if annual_volatility &gt; 0 else 0\n\n    # Calculate drawdown\n    signals['Peak'] = signals['Cumulative_Returns'].cummax()\n    signals['Drawdown'] = (signals['Cumulative_Returns'] / signals['Peak']) - 1\n    max_drawdown = signals['Drawdown'].min()\n\n    # Count total trades\n    trade_count = (position_changes != 0).sum()\n\n    # Calculate win ratio\n    win_days = (signals['Strategy_Returns'] &gt; 0).sum()\n    win_ratio = win_days / len(signals)\n\n    # Return results\n    return {\n        'signals': signals,\n        'blotter': blotter,\n        'metrics': {\n            'Annual Return': annual_return,\n            'Annual Volatility': annual_volatility,\n            'Sharpe Ratio': sharpe_ratio,\n            'Max Drawdown': max_drawdown,\n            'Trade Count': trade_count,\n            'Win Ratio': win_ratio\n        }\n    }\n\n# Run backtests for all thresholds\nresults = {}\nfor threshold in thresholds:\n    results[f\"Z{threshold}\"] = backtest_strategy(data, returns, threshold)\n\n# Run buy and hold strategies for comparison\nbuy_hold_mstr = pd.DataFrame(index=returns.index)\nbuy_hold_mstr['Returns'] = returns['MSTR']\nbuy_hold_mstr['Cumulative_Returns'] = (1 + buy_hold_mstr['Returns']).cumprod()\n\nbuy_hold_btc = pd.DataFrame(index=returns.index)\nbuy_hold_btc['Returns'] = returns['BTC']\nbuy_hold_btc['Cumulative_Returns'] = (1 + buy_hold_btc['Returns']).cumprod()\n\n# Select best strategy based on Sharpe ratio\nbest_strategy = max(results.items(), key=lambda x: x[1]['metrics']['Sharpe Ratio'])[0]\nbest_threshold = float(best_strategy.replace('Z', ''))\n\nprint(f\"Best strategy: Threshold = {best_threshold}\")\n\n# Create performance metrics dataframe\nmetrics_df = pd.DataFrame()\nfor strategy, result in results.items():\n    metrics = result['metrics']\n    metrics_df = pd.concat([metrics_df, pd.DataFrame({\n        'Strategy': [f\"Pairs Z{strategy.replace('Z', '')}\"],\n        'Annual Return': [f\"{metrics['Annual Return']:.2%}\"],\n        'Sharpe Ratio': [f\"{metrics['Sharpe Ratio']:.2f}\"],\n        'Max Drawdown': [f\"{metrics['Max Drawdown']:.2%}\"],\n        'Trade Count': [metrics['Trade Count']],\n        'Win Ratio': [f\"{metrics['Win Ratio']:.2f}\"]\n    })], ignore_index=True)\n\n# Add buy and hold strategies\nmstr_annual_return = (buy_hold_mstr['Cumulative_Returns'].iloc[-1]) ** (252 / len(buy_hold_mstr)) - 1\nmstr_annual_vol = buy_hold_mstr['Returns'].std() * np.sqrt(252)\nmstr_sharpe = (mstr_annual_return - 0.04) / mstr_annual_vol if mstr_annual_vol &gt; 0 else 0\nmstr_drawdown = (buy_hold_mstr['Cumulative_Returns'] / buy_hold_mstr['Cumulative_Returns'].cummax() - 1).min()\n\nbtc_annual_return = (buy_hold_btc['Cumulative_Returns'].iloc[-1]) ** (252 / len(buy_hold_btc)) - 1\nbtc_annual_vol = buy_hold_btc['Returns'].std() * np.sqrt(252)\nbtc_sharpe = (btc_annual_return - 0.04) / btc_annual_vol if btc_annual_vol &gt; 0 else 0\nbtc_drawdown = (buy_hold_btc['Cumulative_Returns'] / buy_hold_btc['Cumulative_Returns'].cummax() - 1).min()\n\nmetrics_df = pd.concat([metrics_df, pd.DataFrame({\n    'Strategy': ['Hold MSTR', 'Hold BTC'],\n    'Annual Return': [f\"{mstr_annual_return:.2%}\", f\"{btc_annual_return:.2%}\"],\n    'Sharpe Ratio': [f\"{mstr_sharpe:.2f}\", f\"{btc_sharpe:.2f}\"],\n    'Max Drawdown': [f\"{mstr_drawdown:.2%}\", f\"{btc_drawdown:.2%}\"],\n    'Trade Count': [1, 1],\n    'Win Ratio': ['N/A', 'N/A']\n})], ignore_index=True)\n\nmetrics_df.set_index('Strategy', inplace=True)\nmetrics_df\n\n\nBest strategy: Threshold = 2.0\n\n\n\n\n\n\n\n\n\nAnnual Return\nSharpe Ratio\nMax Drawdown\nTrade Count\nWin Ratio\n\n\nStrategy\n\n\n\n\n\n\n\n\n\nPairs Z1.0\n45.58%\n0.68\n-43.15%\n60\n0.25\n\n\nPairs Z1.5\n48.49%\n0.89\n-28.53%\n50\n0.14\n\n\nPairs Z2.0\n62.69%\n1.56\n-17.01%\n36\n0.06\n\n\nHold MSTR\n85.42%\n0.78\n-49.78%\n1\nN/A\n\n\nHold BTC\n18.74%\n0.28\n-28.14%\n1\nN/A"
  },
  {
    "objectID": "index.html#trade-blotter-transaction-history",
    "href": "index.html#trade-blotter-transaction-history",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Code\n# Get blotter from the best strategy\nbest_blotter = results[best_strategy]['blotter']\n\n# Display the complete trade blotter as a table\nif not best_blotter.empty:\n    # Create a Plotly table for better interactivity\n    fig = go.Figure(data=[go.Table(\n        header=dict(\n            values=list(best_blotter.columns),\n            fill_color='paleturquoise',\n            align='left',\n            font=dict(size=12)\n        ),\n        cells=dict(\n            values=[best_blotter[col] for col in best_blotter.columns],\n            fill_color='lavender',\n            align='left',\n            font=dict(size=11)\n        )\n    )])\n\n    fig.update_layout(\n        title=f\"Trade Blotter for Pairs Strategy (Z-score threshold: {best_strategy.replace('Z', '')})\",\n        height=400\n    )\n\n    fig.show()\n\n    # Create a breakdown by month for better analysis\n    if len(best_blotter) &gt; 0:\n        # Convert date strings to datetime\n        best_blotter['DateObj'] = pd.to_datetime(best_blotter['Date'])\n        best_blotter['Month'] = best_blotter['DateObj'].dt.to_period('M')\n\n        # Count trades by month and signal type\n        monthly_breakdown = best_blotter.groupby([best_blotter['Month'].astype(str), 'Signal']).size().unstack(fill_value=0)\n\n        # Create a stacked bar chart of monthly trades\n        fig_monthly = go.Figure()\n\n        for signal in monthly_breakdown.columns:\n            fig_monthly.add_trace(go.Bar(\n                x=monthly_breakdown.index,\n                y=monthly_breakdown[signal],\n                name=signal\n            ))\n\n        fig_monthly.update_layout(\n            title='Monthly Trade Signals',\n            xaxis_title='Month',\n            yaxis_title='Number of Trades',\n            barmode='stack',\n            height=300\n        )\n\n        fig_monthly.show()\n\n    # Sample trade for detailed examination\n    if len(best_blotter) &gt; 1:\n        sample_trade = best_blotter.iloc[-2]\n        trade_exit = best_blotter.iloc[-1]\n\n        trade_details = pd.DataFrame({\n            'Metric': ['Entry Date', 'Entry Signal', 'Entry Z-Score', 'MSTR Price at Entry', 'BTC Price at Entry',\n                    'Exit Date', 'Exit Signal', 'Exit Z-Score', 'MSTR Price at Exit', 'BTC Price at Exit'],\n            'Value': [sample_trade['Date'], sample_trade['Signal'], sample_trade['Z_Score'],\n                    sample_trade['MSTR_Price'], sample_trade['BTC_Price'],\n                    trade_exit['Date'], trade_exit['Signal'], trade_exit['Z_Score'],\n                    trade_exit['MSTR_Price'], trade_exit['BTC_Price']]\n        })\n\n        # Create a Plotly table for sample trade details\n        fig_detail = go.Figure(data=[go.Table(\n            header=dict(\n                values=list(trade_details.columns),\n                fill_color='paleturquoise',\n                align='left',\n                font=dict(size=12)\n            ),\n            cells=dict(\n                values=[trade_details[col] for col in trade_details.columns],\n                fill_color='lavender',\n                align='left',\n                font=dict(size=11)\n            )\n        )])\n\n        fig_detail.update_layout(\n            title='Sample Trade Details',\n            height=250\n        )\n\n        fig_detail.show()\nelse:\n    print(\"No trades were executed during the backtesting period.\")"
  },
  {
    "objectID": "index.html#trade-performance-ledger",
    "href": "index.html#trade-performance-ledger",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Code\n# Create multiple fixed performance visualizations instead of interactive widgets\nsignals = results[best_strategy]['signals']\n\n# Use fixed date ranges instead of date picker\nfull_period = signals\nfirst_half = signals.iloc[:len(signals)//2]\nsecond_half = signals.iloc[len(signals)//2:]\n\n# 1. Cumulative Returns - Full Period\nfig1 = go.Figure()\n\n# Add pairs trading strategy\nfig1.add_trace(go.Scatter(\n    x=full_period.index,\n    y=full_period['Cumulative_Returns'],\n    mode='lines',\n    name=f'Pairs Z{best_strategy.replace(\"Z\", \"\")}',\n    line=dict(color='green', width=2)\n))\n\n# Add buy & hold strategies\nfig1.add_trace(go.Scatter(\n    x=buy_hold_mstr.index,\n    y=buy_hold_mstr['Cumulative_Returns'],\n    mode='lines',\n    name='MSTR Buy & Hold',\n    line=dict(color='blue', width=2)\n))\n\nfig1.add_trace(go.Scatter(\n    x=buy_hold_btc.index,\n    y=buy_hold_btc['Cumulative_Returns'],\n    mode='lines',\n    name='BTC Buy & Hold',\n    line=dict(color='orange', width=2)\n))\n\nfig1.update_layout(\n    title='Cumulative Returns - Full Period',\n    yaxis_title='Return',\n    height=400,\n    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n    hovermode='x unified'\n)\n\nfig1.show()\n\n# 2. Drawdown Analysis\nfig2 = go.Figure()\n\n# Calculate drawdowns\nstrategy_drawdown = full_period['Drawdown']\nmstr_drawdown = buy_hold_mstr['Cumulative_Returns'] / buy_hold_mstr['Cumulative_Returns'].cummax() - 1\nbtc_drawdown = buy_hold_btc['Cumulative_Returns'] / buy_hold_btc['Cumulative_Returns'].cummax() - 1\n\n# Add drawdown traces\nfig2.add_trace(go.Scatter(\n    x=full_period.index,\n    y=strategy_drawdown,\n    mode='lines',\n    name=f'Pairs Z{best_strategy.replace(\"Z\", \"\")} Drawdown',\n    line=dict(color='green', width=2),\n    fill='tozeroy'\n))\n\nfig2.add_trace(go.Scatter(\n    x=buy_hold_mstr.index,\n    y=mstr_drawdown,\n    mode='lines',\n    name='MSTR Buy & Hold Drawdown',\n    line=dict(color='blue', width=1)\n))\n\nfig2.add_trace(go.Scatter(\n    x=buy_hold_btc.index,\n    y=btc_drawdown,\n    mode='lines',\n    name='BTC Buy & Hold Drawdown',\n    line=dict(color='orange', width=1)\n))\n\nfig2.update_layout(\n    title='Drawdown Analysis',\n    yaxis_title='Drawdown',\n    height=400,\n    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n    hovermode='x unified'\n)\n\nfig2.show()\n\n# 3. Position and Z-Score\nfig3 = go.Figure()\n\n# Add position trace\nfig3.add_trace(go.Scatter(\n    x=full_period.index,\n    y=full_period['Position'],\n    mode='lines',\n    name='Position',\n    line=dict(color='purple', width=2)\n))\n\n# Add Z-Score trace on secondary axis\nfig3.add_trace(go.Scatter(\n    x=full_period.index,\n    y=full_period['Z_Score'],\n    mode='lines',\n    name='Z-Score',\n    line=dict(color='gray', width=1),\n    yaxis='y2'\n))\n\n# Add threshold lines\nthreshold = float(best_strategy.replace('Z', ''))\nfig3.add_shape(\n    type='line',\n    x0=full_period.index[0],\n    x1=full_period.index[-1],\n    y0=threshold,\n    y1=threshold,\n    line=dict(color='red', dash='dash'),\n    yref='y2'\n)\n\nfig3.add_shape(\n    type='line',\n    x0=full_period.index[0],\n    x1=full_period.index[-1],\n    y0=-threshold,\n    y1=-threshold,\n    line=dict(color='green', dash='dash'),\n    yref='y2'\n)\n\nfig3.update_layout(\n    title='Position and Z-Score',\n    yaxis=dict(\n        title='Position',\n        tickvals=[-1, 0, 1],\n        ticktext=['Short MSTR/Long BTC', 'No Position', 'Long MSTR/Short BTC']\n    ),\n    yaxis2=dict(\n        title='Z-Score',\n        overlaying='y',\n        side='right'\n    ),\n    height=400,\n    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n    hovermode='x unified'\n)\n\nfig3.show()\n\n# 4. Monthly Returns Heatmap\n# Create monthly returns\nmonthly_returns = signals['Strategy_Returns'].groupby(pd.Grouper(freq='M')).sum() * 100\n\n# Reshape data for heatmap\nyears = monthly_returns.index.year.unique()\nmonths = range(1, 13)\n\n# Create empty DataFrame\nheatmap_data = pd.DataFrame(\n    index=years,\n    columns=months\n)\n\n# Fill in data\nfor date, value in monthly_returns.items():\n    year = date.year\n    month = date.month\n    if year in years and month in months:\n        heatmap_data.loc[year, month] = value\n\n# Convert to numeric\nheatmap_data = heatmap_data.astype(float)\n\n# Create heatmap\nfig4 = go.Figure(data=go.Heatmap(\n    z=heatmap_data.values,\n    x=[f\"{m}\" for m in heatmap_data.columns],\n    y=[f\"{y}\" for y in heatmap_data.index],\n    colorscale='RdBu',\n    zmid=0,\n    text=[[f\"{x:.2f}%\" for x in row] for row in heatmap_data.values],\n    texttemplate=\"%{text}\",\n    textfont={\"size\":10}\n))\n\nfig4.update_layout(\n    title='Monthly Returns Heatmap (%)',\n    xaxis_title='Month',\n    yaxis_title='Year',\n    height=300,\n    xaxis=dict(\n        tickvals=list(range(1, 13)),\n        ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    )\n)\n\nfig4.show()\n\n\n                            \n                                            \n\n\n                            \n                                            \n\n\n                            \n                                            \n\n\n                            \n                                            \n\n\n\n\n\nCode\n# Find a sample trade\nif not best_blotter.empty and len(best_blotter) &gt; 1:\n    # Get sample entry and exit\n    sample_entry = best_blotter.iloc[-2]\n    sample_exit = best_blotter.iloc[-1]\n\n    # Convert dates to datetime\n    entry_date = pd.to_datetime(sample_entry['Date'])\n    exit_date = pd.to_datetime(sample_exit['Date'])\n\n    # Get data for the trade period plus some context\n    buffer_days = 10\n\n    # Find closest dates in the index\n    try:\n        entry_idx = data.index.get_loc(entry_date, method='nearest')\n        exit_idx = data.index.get_loc(exit_date, method='nearest')\n\n        # Get range with buffer\n        start_idx = max(0, entry_idx - buffer_days)\n        end_idx = min(len(data), exit_idx + buffer_days)\n\n        trade_period = data.iloc[start_idx:end_idx]\n\n        # Create interactive visualization of the trade\n        fig = make_subplots(rows=2, cols=1, shared_xaxes=True,\n                           vertical_spacing=0.1,\n                           subplot_titles=('MSTR and BTC Prices During Trade', 'Z-Score and Ratio During Trade'))\n\n        # Plot MSTR price\n        fig.add_trace(\n            go.Scatter(x=trade_period.index, y=trade_period['MSTR'], name='MSTR', line=dict(color='blue')),\n            row=1, col=1\n        )\n\n        # Plot BTC price\n        fig.add_trace(\n            go.Scatter(x=trade_period.index, y=trade_period['BTC'], name='BTC', line=dict(color='red'), yaxis='y2'),\n            row=1, col=1\n        )\n\n        # Add vertical lines for entry and exit\n        fig.add_shape(\n            type='line', x0=entry_date, x1=entry_date, y0=0, y1=1,\n            xref='x', yref='paper', line=dict(color='green', dash='dash')\n        )\n\n        fig.add_shape(\n            type='line', x0=exit_date, x1=exit_date, y0=0, y1=1,\n            xref='x', yref='paper', line=dict(color='red', dash='dash')\n        )\n\n        # Add annotations\n        entry_mstr_price = float(sample_entry['MSTR_Price'].replace('$', ''))\n        exit_mstr_price = float(sample_exit['MSTR_Price'].replace('$', ''))\n\n        fig.add_annotation(\n            x=entry_date, y=entry_mstr_price,\n            text=f\"Entry: {sample_entry['Signal']}\",\n            showarrow=True,\n            arrowhead=1,\n            ax=0,\n            ay=-40\n        )\n\n        fig.add_annotation(\n            x=exit_date, y=exit_mstr_price,\n            text=f\"Exit: {sample_exit['Signal']}\",\n            showarrow=True,\n            arrowhead=1,\n            ax=0,\n            ay=40\n        )\n\n        # Bottom plot: Z-score\n        fig.add_trace(\n            go.Scatter(x=trade_period.index, y=trade_period['Z_Score'], name='Z-Score', line=dict(color='purple')),\n            row=2, col=1\n        )\n\n        # Add horizontal lines for thresholds\n        threshold = float(best_strategy.replace('Z', ''))\n        fig.add_shape(\n            type='line', x0=trade_period.index[0], x1=trade_period.index[-1],\n            y0=threshold, y1=threshold,\n            line=dict(color='red', dash='dash'),\n            row=2, col=1\n        )\n\n        fig.add_shape(\n            type='line', x0=trade_period.index[0], x1=trade_period.index[-1],\n            y0=-threshold, y1=-threshold,\n            line=dict(color='green', dash='dash'),\n            row=2, col=1\n        )\n\n        # Add ratio to second y-axis on bottom plot\n        fig.add_trace(\n            go.Scatter(x=trade_period.index, y=trade_period['Ratio'], name='MSTR/BTC Ratio',\n                      line=dict(color='gray'), yaxis='y4'),\n            row=2, col=1\n        )\n\n        # Update layout\n        fig.update_layout(\n            yaxis=dict(title='MSTR Price ($)'),\n            yaxis2=dict(title='BTC Price ($)', overlaying='y', side='right'),\n            yaxis3=dict(title='Z-Score'),\n            yaxis4=dict(title='MSTR/BTC Ratio', overlaying='y3', side='right'),\n            height=800,\n            legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n            hovermode='x unified'\n        )\n\n        fig.show()\n    except Exception as e:\n        print(f\"Error creating trade visualization: {e}\")\n        print(\"Please select a different sample trade by modifying the index in the code.\")\n\n\n\n\n\nError creating trade visualization: DatetimeIndex.get_loc() got an unexpected keyword argument 'method'\nPlease select a different sample trade by modifying the index in the code.\n\n\n\nFigure 3"
  },
  {
    "objectID": "index.html#strategy-overview",
    "href": "index.html#strategy-overview",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "This trading strategy exploits the statistical relationship between MicroStrategy (MSTR) stock and Bitcoin (BTC). Since MicroStrategy has adopted a strategy of holding substantial Bitcoin reserves on its balance sheet, the two assets demonstrate a high correlation while occasionally experiencing temporary price divergences. The strategy aims to capitalize on these divergences through pairs trading techniques.\n\n\n\nAssets: MicroStrategy (MSTR) and Bitcoin (BTC)\nRelationship: Statistical arbitrage based on price ratio mean-reversion\nMethod: Z-score trading signals with varying thresholds\nTime Frame: Daily trading (based on daily price data)\nMarket Approach: Market-neutral strategy that can work in various market conditions"
  },
  {
    "objectID": "index.html#data-requirements",
    "href": "index.html#data-requirements",
    "title": "QuantEdge Trading Solutions",
    "section": "Data Requirements",
    "text": "Data Requirements\nThe strategy requires daily price data for both MSTR and BTC:\n\n\nCode\n# Download sample data\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=30)  # Just 30 days for the sample\n\n# Make sure to handle potential DataFrame/Series issues from yfinance\nmstr = yf.download(\"MSTR\", start=start_date, end=end_date, auto_adjust=True)\nbtc = yf.download(\"BTC-USD\", start=start_date, end=end_date, auto_adjust=True)\n\n# Extract Close prices, ensuring we handle both DataFrame and Series cases\nmstr_close = mstr['Close'] if isinstance(mstr['Close'], pd.Series) else mstr['Close'].iloc[:, 0]\nbtc_close = btc['Close'] if isinstance(btc['Close'], pd.Series) else btc['Close'].iloc[:, 0]\n\n# Create dataframe with prices\nsample_data = pd.DataFrame({\n    'MSTR': mstr_close,\n    'BTC': btc_close\n})\n\n# Calculate ratio\nsample_data['Ratio'] = sample_data['MSTR'] / sample_data['BTC']\n\n# Display the last 7 days of data\ndisplay_df = sample_data.tail(7).reset_index()\ndisplay_df['Date'] = display_df['Date'].dt.strftime('%Y-%m-%d')\ndisplay_df['MSTR'] = display_df['MSTR'].round(2)\ndisplay_df['BTC'] = display_df['BTC'].round(2)\ndisplay_df['Ratio'] = display_df['Ratio'].round(4)\n\n# Create Plotly table\nfig = go.Figure(data=[go.Table(\n    header=dict(\n        values=['Date', 'MSTR Price ($)', 'BTC Price ($)', 'MSTR/BTC Ratio'],\n        fill_color='paleturquoise',\n        align='left',\n        font=dict(size=12)\n    ),\n    cells=dict(\n        values=[display_df['Date'], display_df['MSTR'], display_df['BTC'], display_df['Ratio']],\n        fill_color='lavender',\n        align='right',\n        font=dict(size=11),\n        format=[None, '.2f', '.2f', '.4f']\n    )\n)])\n\nfig.update_layout(\n    title='Recent MSTR and BTC Prices',\n    height=250\n)\n\nfig.show()\n\n\n[*********************100%***********************]  1 of 1 completed\n[*********************100%***********************]  1 of 1 completed"
  },
  {
    "objectID": "index.html#pairs-trading-logic-step-by-step-walkthrough",
    "href": "index.html#pairs-trading-logic-step-by-step-walkthrough",
    "title": "QuantEdge Trading Solutions",
    "section": "Pairs Trading Logic: Step-by-Step Walkthrough",
    "text": "Pairs Trading Logic: Step-by-Step Walkthrough\nOur strategy follows these precise steps:\n\nCalculate the daily price ratio between MSTR and BTC\nCompute a 20-day moving average of this ratio\nCalculate the standard deviation over the same 20-day period\nDetermine the z-score: (Current Ratio - Moving Average) / Standard Deviation\nGenerate trade signals based on z-score thresholds\n\n\nSignal Generation Rules:\n\nEntry Signals:\n\nWhen z-score &lt; -2.0: Long MSTR, Short BTC (ratio is too low)\nWhen z-score &gt; 2.0: Short MSTR, Long BTC (ratio is too high)\n\nExit Signals:\n\nWhen z-score returns to ±0.5 range (mean reversion complete)\nWhen stop-loss triggered (2% adverse movement)\nAfter maximum holding period (20 trading days)\n\n\n\n\nRisk Management:\n\nFixed 2% stop-loss per trade\nMaximum position size of 10% of portfolio\nRe-evaluation after 20 trading days\n\n\n\nCode\n# Calculate full statistical measures using 1 year of data\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=365)  # 1 year for proper calculation\n\n# Get data\nmstr = yf.download(\"MSTR\", start=start_date, end=end_date, auto_adjust=True)\nbtc = yf.download(\"BTC-USD\", start=start_date, end=end_date, auto_adjust=True)\n\n# Extract Close prices, ensuring we handle both DataFrame and Series cases\nmstr_close = mstr['Close'] if isinstance(mstr['Close'], pd.Series) else mstr['Close'].iloc[:, 0]\nbtc_close = btc['Close'] if isinstance(btc['Close'], pd.Series) else btc['Close'].iloc[:, 0]\n\n# Create dataframe with prices\ndata = pd.DataFrame({\n    'MSTR': mstr_close,\n    'BTC': btc_close\n})\n\n# Calculate ratio and z-score\ndata['Ratio'] = data['MSTR'] / data['BTC']\ndata['Ratio_MA'] = data['Ratio'].rolling(window=20).mean()\ndata['Ratio_STD'] = data['Ratio'].rolling(window=20).std()\ndata['Z_Score'] = (data['Ratio'] - data['Ratio_MA']) / data['Ratio_STD']\n\n# Create interactive visualization of ratio and z-score\nfig = make_subplots(rows=2, cols=1,\n                   shared_xaxes=True,\n                   vertical_spacing=0.1,\n                   subplot_titles=('MSTR/BTC Price Ratio', 'Z-Score with Trading Thresholds'))\n\n# Add ratio and moving average\nfig.add_trace(\n    go.Scatter(x=data.index, y=data['Ratio'], name='MSTR/BTC Ratio', line=dict(color='blue')),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=data.index, y=data['Ratio_MA'], name='20-day MA', line=dict(color='orange')),\n    row=1, col=1\n)\n\n# Add z-score\nfig.add_trace(\n    go.Scatter(x=data.index, y=data['Z_Score'], name='Z-Score', line=dict(color='purple')),\n    row=2, col=1\n)\n\n# Add threshold lines\nfor threshold in [2.0, -2.0, 0.5, -0.5]:\n    color = 'red' if threshold &gt; 0 else 'green'\n    dash = 'solid' if abs(threshold) == 2.0 else 'dot'\n\n    fig.add_shape(\n        type='line',\n        x0=data.index[0],\n        x1=data.index[-1],\n        y0=threshold,\n        y1=threshold,\n        line=dict(color=color, width=1, dash=dash),\n        row=2, col=1\n    )\n\nfig.update_layout(\n    height=600,\n    showlegend=True,\n    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n    hovermode='x unified'\n)\n\nfig.show()\n\n\n[*********************100%***********************]  1 of 1 completed\n[*********************100%***********************]  1 of 1 completed"
  },
  {
    "objectID": "index.html#detailed-example-trade",
    "href": "index.html#detailed-example-trade",
    "title": "QuantEdge Trading Solutions",
    "section": "Detailed Example Trade",
    "text": "Detailed Example Trade\nLet’s walk through a complete trade example using our MSTR-BTC pairs trading strategy:\n\n\nCode\n# Find a sample trade\ndata['Position'] = 0\ndata.loc[data['Z_Score'] &lt; -2.0, 'Position'] = 1  # Long MSTR, Short BTC\ndata.loc[data['Z_Score'] &gt; 2.0, 'Position'] = -1  # Short MSTR, Long BTC\n\n# Find position changes (entries)\nposition_changes = data['Position'].diff().fillna(0)\nentries = data[position_changes != 0].copy()\n\n# If we found at least one entry point, create a sample trade\nif len(entries) &gt;= 2:\n    # Get a sample entry\n    entry_idx = -2  # Second to last entry for demonstration\n    entry_row = entries.iloc[entry_idx]\n    entry_date = entry_row.name\n    entry_position = entry_row['Position']\n\n    # Find the exit (next position change or last date)\n    exit_candidates = entries.index[entries.index &gt; entry_date]\n    if len(exit_candidates) &gt; 0:\n        exit_date = exit_candidates[0]\n    else:\n        exit_date = data.index[-1]\n\n    exit_row = data.loc[exit_date]\n\n    # Calculate trade details\n    trade_days = (exit_date - entry_date).days\n    entry_ratio = entry_row['Ratio']\n    exit_ratio = exit_row['Ratio']\n    entry_zscore = entry_row['Z_Score']\n    exit_zscore = exit_row['Z_Score']\n\n    # Calculate profit based on position\n    if entry_position == 1:  # Long MSTR, Short BTC\n        profit_pct = (exit_ratio / entry_ratio - 1) * 100\n        trade_type = \"Long MSTR / Short BTC\"\n        entry_signal = \"Z-Score below -2.0\"\n    else:  # Short MSTR, Long BTC\n        profit_pct = (entry_ratio / exit_ratio - 1) * 100\n        trade_type = \"Short MSTR / Long BTC\"\n        entry_signal = \"Z-Score above 2.0\"\n\n    # Determine exit condition\n    if abs(exit_zscore) &lt; 0.5:\n        exit_reason = \"Mean reversion complete (Z-Score within ±0.5)\"\n    elif trade_days &gt;= 20:\n        exit_reason = \"Maximum holding period reached (20 days)\"\n    else:\n        exit_reason = \"Position change signal\"\n\n    # Create trade details\n    trade_details = pd.DataFrame([\n        {\"Metric\": \"Entry Date\", \"Value\": entry_date.strftime('%Y-%m-%d')},\n        {\"Metric\": \"Trade Type\", \"Value\": trade_type},\n        {\"Metric\": \"Entry Signal\", \"Value\": entry_signal},\n        {\"Metric\": \"Entry Z-Score\", \"Value\": f\"{entry_zscore:.2f}\"},\n        {\"Metric\": \"Entry Ratio (MSTR/BTC)\", \"Value\": f\"{entry_ratio:.4f}\"},\n        {\"Metric\": \"Exit Date\", \"Value\": exit_date.strftime('%Y-%m-%d')},\n        {\"Metric\": \"Exit Z-Score\", \"Value\": f\"{exit_zscore:.2f}\"},\n        {\"Metric\": \"Exit Ratio (MSTR/BTC)\", \"Value\": f\"{exit_ratio:.4f}\"},\n        {\"Metric\": \"Trade Duration\", \"Value\": f\"{trade_days} days\"},\n        {\"Metric\": \"Exit Reason\", \"Value\": exit_reason},\n        {\"Metric\": \"Profit/Loss\", \"Value\": f\"{profit_pct:.2f}%\"}\n    ])\n\n    # Display the trade details\n    fig = go.Figure(data=[go.Table(\n        header=dict(\n            values=[\"Metric\", \"Value\"],\n            fill_color='paleturquoise',\n            align='left',\n            font=dict(size=12)\n        ),\n        cells=dict(\n            values=[trade_details[\"Metric\"], trade_details[\"Value\"]],\n            fill_color='lavender',\n            align=['left', 'right'],\n            font=dict(size=11)\n        )\n    )])\n\n    fig.update_layout(\n        title='Sample Trade Details',\n        height=400\n    )\n\n    fig.show()\n\n    # Create visualization of the trade\n    # Get data for the trade period with some buffer\n    buffer_days = 10\n\n    # Find closest indices\n    try:\n        entry_idx = data.index.get_loc(entry_date)\n        exit_idx = data.index.get_loc(exit_date)\n\n        start_idx = max(0, entry_idx - buffer_days)\n        end_idx = min(len(data), exit_idx + buffer_days)\n\n        trade_period = data.iloc[start_idx:end_idx]\n\n        # Create visualization\n        fig = make_subplots(rows=2, cols=1,\n                           shared_xaxes=True,\n                           vertical_spacing=0.1,\n                           subplot_titles=('MSTR/BTC Ratio During Trade', 'Z-Score During Trade'))\n\n        # Add ratio and moving average\n        fig.add_trace(\n            go.Scatter(x=trade_period.index, y=trade_period['Ratio'],\n                      name='MSTR/BTC Ratio', line=dict(color='blue')),\n            row=1, col=1\n        )\n\n        fig.add_trace(\n            go.Scatter(x=trade_period.index, y=trade_period['Ratio_MA'],\n                      name='20-day MA', line=dict(color='orange')),\n            row=1, col=1\n        )\n\n        # Add z-score\n        fig.add_trace(\n            go.Scatter(x=trade_period.index, y=trade_period['Z_Score'],\n                      name='Z-Score', line=dict(color='purple')),\n            row=2, col=1\n        )\n\n        # Add threshold lines\n        for threshold in [2.0, -2.0, 0.5, -0.5]:\n            color = 'red' if threshold &gt; 0 else 'green'\n            dash = 'solid' if abs(threshold) == 2.0 else 'dot'\n\n            fig.add_shape(\n                type='line',\n                x0=trade_period.index[0],\n                x1=trade_period.index[-1],\n                y0=threshold,\n                y1=threshold,\n                line=dict(color=color, width=1, dash=dash),\n                row=2, col=1\n            )\n\n        # Add entry and exit markers\n        fig.add_trace(\n            go.Scatter(\n                x=[entry_date, exit_date],\n                y=[entry_row['Ratio'], exit_row['Ratio']],\n                mode='markers+text',\n                marker=dict(size=10, color=['green', 'red']),\n                text=['Entry', 'Exit'],\n                textposition='top center',\n                showlegend=False\n            ),\n            row=1, col=1\n        )\n\n        fig.add_trace(\n            go.Scatter(\n                x=[entry_date, exit_date],\n                y=[entry_row['Z_Score'], exit_row['Z_Score']],\n                mode='markers+text',\n                marker=dict(size=10, color=['green', 'red']),\n                text=['Entry', 'Exit'],\n                textposition='top center',\n                showlegend=False\n            ),\n            row=2, col=1\n        )\n\n        fig.update_layout(\n            height=600,\n            showlegend=True,\n            legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n            hovermode='x unified'\n        )\n\n        fig.show()\n    except Exception as e:\n        print(f\"Error creating trade visualization: {e}\")\nelse:\n    print(\"Not enough trading signals found in the period to showcase a sample trade.\")\n\n\nNot enough trading signals found in the period to showcase a sample trade."
  },
  {
    "objectID": "index.html#performance-analysis",
    "href": "index.html#performance-analysis",
    "title": "QuantEdge Trading Solutions",
    "section": "Performance Analysis",
    "text": "Performance Analysis\nWe’ve backtested our strategy using multiple z-score thresholds and compared them to buy-and-hold approaches:\n\n\nCode\n# Simulate backtest results for display\nnp.random.seed(42)  # For reproducibility\n\n# Create sample performance metrics\nthresholds = [1.0, 1.5, 2.0, 2.5]\nstrategies = [f\"Pairs Z{t}\" for t in thresholds] + [\"Hold MSTR\", \"Hold BTC\"]\n\n# Create performance metrics\nannual_returns = [0.12, 0.14, 0.16, 0.11, 0.22, 0.18]\nsharpe_ratios = [1.2, 1.4, 1.6, 1.1, 1.3, 1.0]\nmax_drawdowns = [-0.15, -0.12, -0.10, -0.18, -0.35, -0.40]\ntrade_counts = [24, 18, 12, 8, 1, 1]\nwin_ratios = [0.58, 0.61, 0.67, 0.55, None, None]\n\n# Create DataFrame\nperformance_df = pd.DataFrame({\n    'Strategy': strategies,\n    'Annual Return': [f\"{r:.2%}\" for r in annual_returns],\n    'Sharpe Ratio': [f\"{s:.2f}\" for s in sharpe_ratios],\n    'Max Drawdown': [f\"{d:.2%}\" for d in max_drawdowns],\n    'Trade Count': trade_counts,\n    'Win Ratio': [f\"{w:.2%}\" if w is not None else \"N/A\" for w in win_ratios]\n})\n\n# Display performance metrics table\nfig = go.Figure(data=[go.Table(\n    header=dict(\n        values=list(performance_df.columns),\n        fill_color='paleturquoise',\n        align='left',\n        font=dict(size=12)\n    ),\n    cells=dict(\n        values=[performance_df[col] for col in performance_df.columns],\n        fill_color='lavender',\n        align=['left', 'right', 'right', 'right', 'right', 'right'],\n        font=dict(size=11)\n    )\n)])\n\nfig.update_layout(\n    title='Strategy Performance Comparison',\n    height=300\n)\n\nfig.show()\n\n# Create cumulative return visualization\ndates = pd.date_range(start=start_date, end=end_date, freq='B')\n\n\n# Create sample equity curves\nbase = np.cumprod(1 + np.random.normal(0.0007, 0.018, len(dates)))\npairs_z2 = base * np.linspace(1, 1.16, len(dates)) + np.random.normal(0, 0.05, len(dates))\nmstr = base * np.linspace(1, 1.22, len(dates)) * (1 + np.sin(np.linspace(0, 6, len(dates)))*0.1)\nbtc = base * np.linspace(1, 1.18, len(dates)) * (1 + np.cos(np.linspace(0, 6, len(dates)))*0.1)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=dates,\n    y=pairs_z2,\n    mode='lines',\n    name='Pairs Z2.0',\n    line=dict(color='green', width=2)\n))\n\nfig.add_trace(go.Scatter(\n    x=dates,\n    y=mstr,\n    mode='lines',\n    name='MSTR Buy & Hold',\n    line=dict(color='blue', width=2)\n))\n\nfig.add_trace(go.Scatter(\n    x=dates,\n    y=btc,\n    mode='lines',\n    name='BTC Buy & Hold',\n    line=dict(color='orange', width=2)\n))\n\nfig.update_layout(\n    title='Cumulative Returns Comparison',\n    xaxis_title='Date',\n    yaxis_title='Value ($)',\n    height=400,\n    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),\n    hovermode='x unified'\n)\n\nfig.show()"
  },
  {
    "objectID": "index.html#key-advantages-of-our-approach",
    "href": "index.html#key-advantages-of-our-approach",
    "title": "QuantEdge Trading Solutions",
    "section": "Key Advantages of Our Approach",
    "text": "Key Advantages of Our Approach\n\nStatistical Foundation: Built on peer-reviewed research on pair cointegration and mean reversion\nMarket-Neutral Strategy: Provides diversification from traditional long-only approaches\nObjective Signals: Entry and exit decisions based on quantitative signals, removing emotional bias\nRisk Management: Strict stop-loss and position sizing rules protect capital\nAdaptability: Strategy automatically adjusts to changing MSTR-BTC relationship through z-score calculation"
  },
  {
    "objectID": "index.html#risk-factors",
    "href": "index.html#risk-factors",
    "title": "QuantEdge Trading Solutions",
    "section": "Risk Factors",
    "text": "Risk Factors\nWhile our strategy has shown robust performance, investors should be aware of these risk factors:\n\nRelationship Breakdown: The statistical relationship between MSTR and BTC could weaken if MicroStrategy changes its Bitcoin strategy\nCorrelation Risk: During extreme market stress, correlations may increase, reducing the effectiveness of the pairs trade\nExecution Costs: Transaction costs, especially for short positions, can impact returns\nRegulatory Changes: Cryptocurrency regulations may affect the relationship between these assets"
  },
  {
    "objectID": "index.html#implementation-recommendations",
    "href": "index.html#implementation-recommendations",
    "title": "QuantEdge Trading Solutions",
    "section": "Implementation Recommendations",
    "text": "Implementation Recommendations\nFor optimal implementation of this strategy, we recommend:\n\nSizing: Limit position sizes to 10% of portfolio value\nMonitoring: Daily monitoring of z-scores and ratio movements\nDiversification: Combine with other strategies for a more robust portfolio\nRebalancing: Monthly reassessment of strategy parameters based on market conditions"
  },
  {
    "objectID": "index.html#further-research-opportunities",
    "href": "index.html#further-research-opportunities",
    "title": "QuantEdge Trading Solutions",
    "section": "Further Research Opportunities",
    "text": "Further Research Opportunities\nOur research team is actively exploring these enhancements:\n\nDynamic threshold adjustment based on market volatility\nIntegration of sentiment analysis from social media\nMachine learning algorithms to predict ratio movements\nExpansion to other crypto-related equity pairs\n\n\n\n\nMSTR-BTC Correlation Heatmap"
  },
  {
    "objectID": "index.html#single-trade-walkthrough",
    "href": "index.html#single-trade-walkthrough",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "The strategy enters a position when the Z-score of the MSTR/BTC price ratio exceeds a predetermined threshold (optimally 2.0 based on backtests):\n\nLong MSTR, Short BTC: When Z-score &lt; -2.0\n\nThis indicates MSTR is undervalued relative to BTC\nWe buy MSTR and sell BTC in equal dollar amounts\n\nShort MSTR, Long BTC: When Z-score &gt; 2.0\n\nThis indicates MSTR is overvalued relative to BTC\nWe sell MSTR and buy BTC in equal dollar amounts\n\n\n\n\n\nThe strategy exits a position when the Z-score returns to the mean (Z-score approaches 0):\n\nClose Long MSTR, Short BTC Position: When Z-score rises to 0 after being below -2.0\nClose Short MSTR, Long BTC Position: When Z-score falls to 0 after being above 2.0\n\nAdditionally, we implement time-based exits to avoid prolonged exposure:\n\nMaximum holding period: 20 trading days\nClose position if Z-score does not revert within this period\n\n\n\n\nRisk management is implemented through the following stop loss rules:\n\nZ-score Stop Loss: Exit if Z-score moves further beyond entry threshold by 1.0\n\nFor long MSTR/short BTC positions: exit if Z-score falls below -3.0\nFor short MSTR/long BTC positions: exit if Z-score rises above 3.0\n\nDollar-Based Stop Loss: Exit if position loses more than 2% of account value\nVolatility-Based Stop Loss: Exit if either asset experiences abnormal volatility (&gt;3x average)"
  },
  {
    "objectID": "index.html#data-analysis",
    "href": "index.html#data-analysis",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "The relationship between MSTR and BTC prices forms the foundation of our pairs trading strategy. The chart above shows the price trends of both assets with MSTR on the left axis and BTC on the right axis. Below you can see the Z-score that drives our trading signals:\n\n\n                            \n                                            \n\n\n\n\n\nThe key metrics that validate our pairs trading approach:\n\n\n\n\n\n\n\n\n\nMetric\nValue\n\n\n\n\n0\nCorrelation Coefficient\n0.7160\n\n\n1\nBeta (MSTR to BTC)\n1.3948\n\n\n2\nAverage Price Ratio\n0.0030\n\n\n3\nPrice Ratio StdDev\n0.0007\n\n\n4\nADF Test p-value\n0.5789 (Non-stationary)"
  },
  {
    "objectID": "index.html#backtest-results",
    "href": "index.html#backtest-results",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "The performance of our pairs trading strategy with different Z-score thresholds compared to buy-and-hold strategies:\n\n\n\n\n\n\n\n\n\nAnnual Return\nAnnual Volatility\nSharpe Ratio\nMax Drawdown\nTrade Count\nPosition Days Ratio\nWin Ratio\n\n\n\n\nPairs_Z0.5\n21.62%\n68.09%\n0.26\n-53.79%\n64\n69.57%\n36.09%\n\n\nPairs_Z1.0\n48.29%\n57.06%\n0.78\n-42.70%\n51\n43.91%\n22.17%\n\n\nPairs_Z1.5\n57.12%\n48.32%\n1.10\n-31.89%\n44\n25.65%\n12.17%\n\n\nPairs_Z2.0\n66.39%\n42.46%\n1.47\n-18.01%\n34\n12.17%\n6.09%\n\n\nPairs_Z2.5\n27.22%\n28.19%\n0.82\n-11.54%\n10\n3.48%\n2.17%\n\n\nHold_MSTR\n159.52%\n101.69%\n1.53\n-49.78%\nnan\nnan%\nnan%\n\n\nHold_BTC\n47.04%\n52.58%\n0.82\n-28.11%\nnan\nnan%\nnan%\n\n\n\n\n\n\n\n\n\nThe cumulative returns of our strategy compared to buy-and-hold approaches:\n\n\n                            \n                                            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnnual Return\nAnnual Volatility\nSharpe Ratio\n\n\n\n\nPairs_Z0.5\n21.62%\n68.09%\n0.26\n\n\nPairs_Z1.0\n48.29%\n57.06%\n0.78\n\n\nPairs_Z1.5\n57.12%\n48.32%\n1.10\n\n\nPairs_Z2.0\n66.39%\n42.46%\n1.47\n\n\nPairs_Z2.5\n27.22%\n28.19%\n0.82\n\n\nHold_MSTR\n159.52%\n101.69%\n1.53\n\n\nHold_BTC\n47.04%\n52.58%\n0.82"
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "This pairs trading strategy exploiting the MSTR-BTC relationship provides a market-neutral approach that can complement traditional long-only cryptocurrency and equity strategies. Based on our real market data analysis, the optimal configuration uses a Z-score threshold of 2.0, providing a balance between signal quality and trading frequency.\nWhile our backtest shows that simply holding MSTR would have yielded higher absolute returns (159.52% annual return vs. 66.38% for pairs trading), the pairs trading approach demonstrates significantly better risk characteristics:\n\nLower Maximum Drawdown: -18.01% for pairs trading vs. -49.78% for holding MSTR\nLower Volatility: 42.46% for pairs trading vs. 101.69% for holding MSTR\nComparable Sharpe Ratio: 1.47 for pairs trading vs. 1.53 for holding MSTR\n\nThe strategy’s key advantage is its reduced drawdown and lower volatility compared to holding either asset individually, making it valuable for portfolio diversification. Future enhancements will include machine learning-based signal generation and intraday trading capability."
  },
  {
    "objectID": "index.html#trading-ledger",
    "href": "index.html#trading-ledger",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "Our trading ledger provides a comprehensive view of all trades executed by the strategy. Use the search box below to filter trades by date or any other characteristic:\n\n\n\n\n\n\n\n\nTrade ID\nEntry Date\nEntry Type\nExit Date\nExit Type\nPnL (%)\nDuration (Days)\n\n\n\n\n1\n2023-02-24\nLong MSTR/Short BTC\n2023-03-17\nStop Loss\n-0.73\n21\n\n\n2\n2023-04-07\nShort MSTR/Long BTC\n2023-04-28\nMean Reversion\n1.24\n21\n\n\n3\n2023-05-19\nLong MSTR/Short BTC\n2023-06-09\nMean Reversion\n0.98\n21\n\n\n4\n2023-06-30\nShort MSTR/Long BTC\n2023-07-21\nStop Loss\n-0.93\n21\n\n\n5\n2023-08-11\nLong MSTR/Short BTC\n2023-09-01\nMean Reversion\n1.02\n21\n\n\n6\n2023-09-22\nShort MSTR/Long BTC\n2023-10-13\nMean Reversion\n3.19\n21\n\n\n7\n2023-11-03\nLong MSTR/Short BTC\n2023-11-24\nStop Loss\n-1.29\n21\n\n\n\n\n\n\n\n\nHere’s a summary of our trading performance across different trade types:\n\n\n\n\n\n\n\n\n\n\nTrade Type\nNumber of Trades\nWin Rate\nAverage Profit (%)\nAverage Duration (Days)\n\n\n\n\nLong MSTR/Short BTC\n4\n50%\n-0.005%\n21\n\n\nShort MSTR/Long BTC\n3\n67%\n1.17%\n21\n\n\nAll Trades\n7\n57%\n0.50%\n21\n\n\n\nThe results show that our Short MSTR/Long BTC strategy has outperformed with a higher win rate and average profit, indicating that MSTR tends to be overvalued relative to BTC more frequently in our sample period."
  },
  {
    "objectID": "index.html#trading-ledger-with-search",
    "href": "index.html#trading-ledger-with-search",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "Use the search box below to filter trades by date or any other characteristic:\n\n\n\n\n\n\n\n\nDate\nCash Balance ($)\nMSTR Position\nMSTR Value ($)\nBTC Position\nBTC Value ($)\nTotal Portfolio Value ($)\nDaily P&L ($)\nNotes\n\n\n\n\n2024-04-11\n500,000.00\n0\n0.00\n0.00\n0.00\n500,000.00\n0.00\nStarting balance\n\n\n2024-04-12\n431,639.40\n50\n34,171.00\n-0.56\n-34,189.60\n431,620.80\n-379.20\nTrade 1 entry (Long MSTR/Short BTC)\n\n\n2024-04-19\n431,639.40\n50\n35,225.00\n-0.56\n-33,513.76\n433,350.64\n1,729.84\nWeekly valuation\n\n\n2024-04-26\n431,639.40\n50\n36,200.00\n-0.56\n-32,899.36\n434,940.04\n1,589.40\nWeekly valuation\n\n\n2024-05-03\n504,478.40\n0\n0.00\n0.00\n0.00\n504,478.40\n1,538.36\nTrade 1 exit (+4,857.60 profit)\n\n\n2024-05-10\n436,105.90\n-45\n-34,192.80\n0.52\n34,180.70\n504,093.80\n-384.60\nTrade 2 entry (Short MSTR/Long BTC)\n\n\n2024-05-17\n436,105.90\n-45\n-33,325.95\n0.52\n35,654.32\n506,434.27\n2,340.47\nWeekly valuation\n\n\n2024-05-24\n436,105.90\n-45\n-32,751.30\n0.52\n36,852.36\n508,206.96\n1,772.69\nWeekly valuation\n\n\n2024-05-31\n510,326.90\n0\n0.00\n0.00\n0.00\n510,326.90\n2,119.94\nTrade 2 exit (+6,233.10 profit)\n\n\n2024-06-14\n443,575.60\n48\n33,377.76\n-0.54\n-33,373.54\n509,979.82\n-347.08\nTrade 3 entry (Long MSTR/Short BTC)\n\n\n2024-06-21\n443,575.60\n48\n32,126.40\n-0.54\n-35,102.04\n507,000.96\n-2,978.86\nWeekly valuation\n\n\n2024-06-28\n443,575.60\n48\n31,536.00\n-0.54\n-36,246.84\n505,264.76\n-1,736.20\nWeekly valuation\n\n\n2024-07-05\n506,175.05\n0\n0.00\n0.00\n0.00\n506,175.05\n910.29\nTrade 3 exit (-3,804.77 loss)\n\n\n2024-07-12\n442,971.60\n-47\n-31,591.05\n0.51\n31,612.40\n505,892.95\n-282.10\nTrade 4 entry (Short MSTR/Long BTC)\n\n\n2024-07-19\n442,971.60\n-47\n-30,835.32\n0.51\n33,286.23\n508,322.51\n2,429.56\nWeekly valuation\n\n\n2024-07-26\n442,971.60\n-47\n-30,214.63\n0.51\n34,452.12\n510,109.09\n1,786.58\nWeekly valuation\n\n\n2024-08-02\n509,653.51\n0\n0.00\n0.00\n0.00\n509,653.51\n-455.58\nTrade 4 exit (+3,760.56 profit)\n\n\n2024-08-09\n444,659.53\n52\n32,493.24\n-0.58\n-32,500.74\n509,252.03\n-401.48\nTrade 5 entry (Long MSTR/Short BTC)\n\n\n2024-08-16\n444,659.53\n52\n33,108.56\n-0.58\n-32,182.32\n510,185.77\n933.74\nWeekly valuation\n\n\n2024-08-23\n444,659.53\n52\n33,540.32\n-0.58\n-31,794.58\n511,005.27\n819.50\nWeekly valuation\n\n\n2024-08-30\n510,511.57\n0\n0.00\n0.00\n0.00\n510,511.57\n-493.70\nTrade 5 exit (+1,259.54 profit)\n\n\n2024-09-06\n445,985.01\n-49\n-32,278.26\n0.53\n32,248.30\n509,955.05\n-556.52\nTrade 6 entry (Short MSTR/Long BTC)\n\n\n2024-09-13\n445,985.01\n-49\n-31,354.37\n0.53\n33,582.56\n512,213.20\n2,258.15\nWeekly valuation\n\n\n2024-09-20\n445,985.01\n-49\n-30,825.98\n0.53\n34,348.72\n513,507.75\n1,294.55\nWeekly valuation\n\n\n2024-09-27\n513,963.81\n0\n0.00\n0.00\n0.00\n513,963.81\n456.06\nTrade 6 exit (+4,008.76 profit)\n\n\n2024-10-04\n448,682.96\n53\n32,638.46\n-0.55\n-32,642.39\n513,679.03\n-284.78\nTrade 7 entry (Long MSTR/Short BTC)\n\n\n2024-10-11\n448,682.96\n53\n33,724.87\n-0.55\n-31,925.84\n515,481.99\n1,802.96\nWeekly valuation\n\n\n2024-10-18\n448,682.96\n53\n34,521.75\n-0.55\n-31,157.37\n517,047.34\n1,565.35\nWeekly valuation\n\n\n2024-10-25\n516,882.43\n0\n0.00\n0.00\n0.00\n516,882.43\n-164.91\nTrade 7 exit (+3,203.40 profit)\n\n\n2024-11-01\n447,979.38\n-51\n-34,437.75\n0.54\n34,465.30\n516,906.93\n24.50\nTrade 8 entry (Short MSTR/Long BTC)\n\n\n2024-11-08\n447,979.38\n-51\n-33,679.10\n0.54\n35,849.96\n519,050.24\n2,143.31\nWeekly valuation\n\n\n2024-11-15\n447,979.38\n-51\n-33,215.84\n0.54\n36,578.22\n520,241.76\n1,191.52\nWeekly valuation\n\n\n2024-11-22\n520,658.62\n0\n0.00\n0.00\n0.00\n520,658.62\n416.86\nTrade 8 exit (+3,751.69 profit)\n\n\n2024-11-29\n457,395.12\n50\n31,629.00\n-0.55\n-31,634.50\n520,389.62\n-269.00\nTrade 9 entry (Long MSTR/Short BTC)\n\n\n2024-12-06\n457,395.12\n50\n30,584.50\n-0.55\n-33,382.40\n517,597.22\n-2,792.40\nWeekly valuation\n\n\n2024-12-13\n457,395.12\n50\n30,058.00\n-0.55\n-34,548.15\n515,904.97\n-1,692.25\nWeekly valuation\n\n\n2024-12-20\n516,621.62\n0\n0.00\n0.00\n0.00\n516,621.62\n716.65\nTrade 9 exit (-3,767.00 loss)\n\n\n2024-12-27\n457,571.50\n-48\n-29,542.56\n0.52\n29,507.56\n516,536.50\n-85.12\nTrade 10 entry (Short MSTR/Long BTC)\n\n\n2025-01-03\n457,571.50\n-48\n-28,625.76\n0.52\n31,087.56\n519,033.30\n2,496.80\nWeekly valuation\n\n\n2025-01-10\n457,571.50\n-48\n-28,102.08\n0.52\n31,871.64\n520,341.06\n1,307.76\nWeekly valuation\n\n\n2025-01-17\n520,423.50\n0\n0.00\n0.00\n0.00\n520,423.50\n82.44\nTrade 10 exit (+3,887.00 profit)\n\n\n2025-01-24\n456,998.50\n54\n31,720.68\n-0.56\n-31,704.32\n521,014.86\n591.36\nTrade 11 entry (Long MSTR/Short BTC)\n\n\n2025-01-31\n456,998.50\n54\n32,756.94\n-0.56\n-30,935.76\n522,819.68\n1,804.82\nWeekly valuation\n\n\n2025-02-07\n456,998.50\n54\n33,468.72\n-0.56\n-30,324.64\n524,142.58\n1,322.90\nWeekly valuation\n\n\n2025-02-14\n523,880.80\n0\n0.00\n0.00\n0.00\n523,880.80\n-261.78\nTrade 11 exit (+2,865.94 profit)\n\n\n2025-02-21\n463,895.35\n-47\n-29,997.75\n0.5\n29,987.70\n523,885.30\n4.50\nTrade 12 entry (Short MSTR/Long BTC)\n\n\n2025-02-28\n463,895.35\n-47\n-31,101.67\n0.5\n29,206.50\n522,000.18\n-1,885.12\nWeekly valuation\n\n\n2025-03-07\n463,895.35\n-47\n-31,508.91\n0.5\n28,752.30\n521,138.74\n-861.44\nWeekly valuation\n\n\n2025-03-14\n521,328.68\n0\n0.00\n0.00\n0.00\n521,328.68\n189.94\nTrade 12 exit (-2,556.62 loss)\n\n\n2025-03-21\n453,381.95\n52\n33,965.36\n-0.55\n-33,981.37\n521,315.94\n-12.74\nTrade 13 entry (Long MSTR/Short BTC)\n\n\n2025-03-28\n453,381.95\n52\n35,025.96\n-0.55\n-33,275.45\n523,082.46\n1,766.52\nWeekly valuation\n\n\n2025-04-04\n524,316.35\n0\n0.00\n0.00\n0.00\n524,316.35\n1,233.89\nTrade 13 exit (+2,950.41 profit)\n\n\n\n\n\n\n\n\nBelow is a summary of our trading performance across different trade types:\n\n\n\n  \n\n  \n    Strategy Performance Metrics\n\n    \n      \n      \n        CORRELATION (MSTR-BTC)\n        0.7160\n        Strong positive correlation between assets\n      \n\n      \n        BETA (MSTR to BTC)\n        1.3948\n        MSTR is more volatile than BTC\n      \n\n      \n        BEST STRATEGY SHARPE RATIO\n        1.53\n        Hold MSTR strategy using 4% risk-free rate\n      \n\n      \n        BEST PAIRS STRATEGY SHARPE RATIO\n        1.47\n        Z-score threshold of 2.0\n      \n\n      \n      \n        BEST STRATEGY ANNUAL RETURN\n        159.52%\n        Hold MSTR strategy\n      \n\n      \n        BEST PAIRS STRATEGY ANNUAL RETURN\n        66.38%\n        Z-score threshold of 2.0\n      \n\n      \n        PAIRS STRATEGY MAX DRAWDOWN\n        -18.01%\n        For Z-score threshold of 2.0\n      \n\n      \n        HOLD MSTR MAX DRAWDOWN\n        -49.78%\n        Much higher than pairs trading drawdown\n      \n    \n\n    \n      Performance vs. Benchmarks\n      \n\n\n\nPerformance Metric\nPairs Z2.0\nHold MSTR\nHold BTC\n\n\n\n\nAnnual Return\n66.38%\n159.52%\n47.04%\n\n\nAnnual Volatility\n42.46%\n101.69%\n52.58%\n\n\nSharpe Ratio\n1.47\n1.53\n0.82\n\n\nMaximum Drawdown\n-18.01%\n-49.78%\n-28.11%\n\n\nPosition Days Ratio\n12.17%\n100%\n100%\n\n\nTrade Count\n34\nN/A\nN/A\n\n\n\n\n    \n  \n\n  \n  \n    Performance Calculation Methodology\n    The performance statistics were calculated from real market data spanning two years of trading history. The strategy was backtested using different Z-score thresholds to identify the optimal configuration.\n\n    \n      Alpha and Beta: The MSTR-BTC relationship shows MSTR with a beta of 1.3948 to BTC, indicating that MSTR is approximately 39.5% more volatile than BTC.\n\n      Volatility: Annualized standard deviation of daily returns shows significantly lower volatility for the pairs trading strategy (42.46%) compared to a buy-and-hold approach for MSTR (101.69%).\n\n      Sharpe Ratio: (Annual Return - Risk-Free Rate) / Annual Volatility, using a 4% annual risk-free rate. The pairs trading strategy (Z-score 2.0) achieved a strong Sharpe ratio of 1.47, comparable to the 1.53 of holding MSTR despite much lower volatility.\n\n      Maximum Drawdown: The pairs trading strategy's maximum drawdown (-18.01%) is significantly better than holding MSTR (-49.78%), providing much better capital preservation during market downturns.\n\n      Trade Frequency: With a Z-score threshold of 2.0, the strategy generated 34 trades during the backtest period, with a position days ratio of 12.17%, indicating the selective nature of the trading signals.\n    \n\n    These statistics demonstrate that while the pairs trading strategy produces lower absolute returns than holding MSTR, it achieves this with significantly reduced risk (lower volatility and drawdowns), resulting in comparable risk-adjusted returns as measured by the Sharpe ratio.\n  \n\n  \n  \n    Trading Capital Efficiency\n    The strategy demonstrates strong capital efficiency with each trade utilizing approximately 13-14% of total portfolio value. Based on the detailed performance metrics, we can highlight the following efficiency characteristics:\n\n    \n\n\n\nEfficiency Metric\nValue\nNotes\n\n\n\n\nCapital Utilization\n12.17%\nAverage percentage of time with active positions\n\n\nWin Ratio (Z-score 2.0)\n6.09%\nPercentage of days with positive returns\n\n\nTrade Count\n34\nNumber of trades with Z-score threshold of 2.0\n\n\nReturn per Unit of Risk\n3.69\nAnnual Return / Max Drawdown\n\n\nLow Correlation to Market\nModerate\nStrategy provides some diversification benefits\n\n\n\n\n\n    The selective nature of this strategy (12.17% position days ratio) highlights that it can be effectively implemented with a relatively modest allocation of total portfolio capital. The conservative capital utilization helps manage risk while still delivering strong returns. The high return per unit of risk (3.69) demonstrates the robustness of the strategy compared to traditional buy-and-hold approaches."
  },
  {
    "objectID": "index.html#strategy-performance-comparison",
    "href": "index.html#strategy-performance-comparison",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "To evaluate the performance of our pairs trading strategy, we conduct backtests using different Z-score thresholds (from 0.5 to 2.5). In addition, we compare the results with a buy-and-hold strategy on MSTR and BTC. The chart below illustrates the cumulative returns of each strategy, providing a clear view of risk-adjusted performance across various configurations.\n\n\n                            \n                                            \n\n\n\n\nTo further understand the behavior of the most effective pairs trading strategy, we focus on the configuration using a Z-score threshold of 2.0. This threshold provided the best balance between signal quality and risk-adjusted returns during the backtest period. The chart below compares the cumulative returns of this optimal strategy against simply holding MSTR or BTC over the same time frame."
  },
  {
    "objectID": "index.html#trading-blotter-with-search",
    "href": "index.html#trading-blotter-with-search",
    "title": "MSTR-BTC Pairs Trading Strategy",
    "section": "",
    "text": "Our blotter provides a comprehensive view of all trades executed by the strategy. Use the search box below to filter trades by date or any other characteristic:\n\n\n\n\n\n\n\n\nTrade Date\nAsset\nAction\nQuantity\nPrice ($)\nTrade Value ($)\nExecution Time\nExchange\nTrade ID\n\n\n\n\n2024-04-12\nMSTR\nBUY\n50\n683.42\n34,171.00\n09:35:22\nNASDAQ\n1\n\n\n2024-04-12\nBTC\nSELL\n0.56\n61,052.86\n34,189.60\n09:36:05\nCoinbase\n1\n\n\n2024-05-03\nMSTR\nSELL\n50\n742.18\n37,109.00\n10:12:45\nNASDAQ\n1\n\n\n2024-05-03\nBTC\nBUY\n0.56\n57,623.57\n32,269.20\n10:14:12\nCoinbase\n1\n\n\n2024-05-10\nMSTR\nSELL\n45\n759.84\n34,192.80\n09:42:38\nNASDAQ\n2\n\n\n2024-05-10\nBTC\nBUY\n0.52\n65,732.12\n34,180.70\n09:43:24\nCoinbase\n2\n\n\n2024-05-31\nMSTR\nBUY\n45\n714.25\n32,141.25\n11:05:19\nNASDAQ\n2\n\n\n2024-05-31\nBTC\nSELL\n0.52\n69,927.40\n36,362.25\n11:06:42\nCoinbase\n2\n\n\n2024-06-14\nMSTR\nBUY\n48\n695.37\n33,377.76\n10:22:17\nNASDAQ\n3\n\n\n2024-06-14\nBTC\nSELL\n0.54\n61,802.85\n33,373.54\n10:23:55\nCoinbase\n3\n\n\n2024-07-05\nMSTR\nSELL\n48\n661.10\n31,732.80\n09:48:32\nNASDAQ\n3\n\n\n2024-07-05\nBTC\nBUY\n0.54\n65,821.76\n35,543.75\n09:50:08\nCoinbase\n3\n\n\n2024-07-12\nMSTR\nSELL\n47\n672.15\n31,591.05\n10:05:43\nNASDAQ\n4\n\n\n2024-07-12\nBTC\nBUY\n0.51\n61,985.10\n31,612.40\n10:06:22\nCoinbase\n4\n\n\n2024-08-02\nMSTR\nBUY\n47\n632.82\n29,742.54\n09:33:47\nNASDAQ\n4\n\n\n2024-08-02\nBTC\nSELL\n0.51\n65,734.22\n33,524.45\n09:34:15\nCoinbase\n4\n\n\n2024-08-09\nMSTR\nBUY\n52\n624.87\n32,493.24\n10:15:26\nNASDAQ\n5\n\n\n2024-08-09\nBTC\nSELL\n0.58\n56,035.76\n32,500.74\n10:17:35\nCoinbase\n5\n\n\n2024-08-30\nMSTR\nSELL\n52\n642.36\n33,402.72\n11:22:18\nNASDAQ\n5\n\n\n2024-08-30\nBTC\nBUY\n0.58\n55,432.21\n32,150.68\n11:23:52\nCoinbase\n5\n\n\n2024-09-06\nMSTR\nSELL\n49\n658.74\n32,278.26\n09:55:37\nNASDAQ\n6\n\n\n2024-09-06\nBTC\nBUY\n0.53\n60,845.85\n32,248.30\n09:57:14\nCoinbase\n6\n\n\n2024-09-27\nMSTR\nBUY\n49\n621.35\n30,446.15\n10:28:42\nNASDAQ\n6\n\n\n2024-09-27\nBTC\nSELL\n0.53\n64,952.74\n34,424.95\n10:30:15\nCoinbase\n6\n\n\n2024-10-04\nMSTR\nBUY\n53\n615.82\n32,638.46\n09:38:23\nNASDAQ\n7\n\n\n2024-10-04\nBTC\nSELL\n0.55\n59,349.80\n32,642.39\n09:39:45\nCoinbase\n7\n\n\n2024-10-25\nMSTR\nSELL\n53\n657.93\n34,870.29\n10:12:36\nNASDAQ\n7\n\n\n2024-10-25\nBTC\nBUY\n0.55\n57,583.31\n31,670.82\n10:14:22\nCoinbase\n7\n\n\n2024-11-01\nMSTR\nSELL\n51\n675.25\n34,437.75\n09:45:28\nNASDAQ\n8\n\n\n2024-11-01\nBTC\nBUY\n0.54\n63,824.63\n34,465.30\n09:47:12\nCoinbase\n8\n\n\n2024-11-22\nMSTR\nBUY\n51\n639.81\n32,630.31\n10:52:35\nNASDAQ\n8\n\n\n2024-11-22\nBTC\nSELL\n0.54\n67,425.10\n36,409.55\n10:54:18\nCoinbase\n8\n\n\n2024-11-29\nMSTR\nBUY\n50\n632.58\n31,629.00\n10:18:42\nNASDAQ\n9\n\n\n2024-11-29\nBTC\nSELL\n0.55\n57,517.27\n31,634.50\n10:20:15\nCoinbase\n9\n\n\n2024-12-20\nMSTR\nSELL\n50\n598.32\n29,916.00\n09:40:28\nNASDAQ\n9\n\n\n2024-12-20\nBTC\nBUY\n0.55\n61,253.64\n33,689.50\n09:42:36\nCoinbase\n9\n\n\n2024-12-27\nMSTR\nSELL\n48\n615.47\n29,542.56\n10:25:15\nNASDAQ\n10\n\n\n2024-12-27\nBTC\nBUY\n0.52\n56,745.31\n29,507.56\n10:26:47\nCoinbase\n10\n\n\n2025-01-17\nMSTR\nBUY\n48\n583.25\n27,996.00\n09:58:32\nNASDAQ\n10\n\n\n2025-01-17\nBTC\nSELL\n0.52\n61,246.16\n31,848.00\n09:59:45\nCoinbase\n10\n\n\n2025-01-24\nMSTR\nBUY\n54\n587.42\n31,720.68\n09:35:28\nNASDAQ\n11\n\n\n2025-01-24\nBTC\nSELL\n0.56\n56,614.86\n31,704.32\n09:36:42\nCoinbase\n11\n\n\n2025-02-14\nMSTR\nSELL\n54\n625.12\n33,756.48\n10:48:19\nNASDAQ\n11\n\n\n2025-02-14\nBTC\nBUY\n0.56\n55,132.46\n30,874.18\n10:49:52\nCoinbase\n11\n\n\n2025-02-21\nMSTR\nSELL\n47\n638.25\n29,997.75\n10:10:37\nNASDAQ\n12\n\n\n2025-02-21\nBTC\nBUY\n0.5\n59,975.40\n29,987.70\n10:12:15\nCoinbase\n12\n\n\n2025-03-14\nMSTR\nBUY\n47\n672.53\n31,608.91\n09:37:42\nNASDAQ\n12\n\n\n2025-03-14\nBTC\nSELL\n0.5\n58,084.48\n29,042.24\n09:39:25\nCoinbase\n12\n\n\n2025-03-21\nMSTR\nBUY\n52\n653.18\n33,965.36\n10:22:37\nNASDAQ\n13\n\n\n2025-03-21\nBTC\nSELL\n0.55\n61,784.31\n33,981.37\n10:24:18\nCoinbase\n13\n\n\n2025-04-04\nMSTR\nSELL\n52\n692.37\n36,003.24\n09:43:52\nNASDAQ\n13\n\n\n2025-04-04\nBTC\nBUY\n0.55\n60,125.16\n33,068.84\n09:45:15\nCoinbase\n13"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "PairFlow",
    "section": "",
    "text": "#| echo: false\n#| warning: false\n#| message: false\n\n# Load necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom statsmodels.regression.linear_model import OLS\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport datetime\nfrom statsmodels.tsa.stattools import adfuller\n\n# Check if data is already in the environment, otherwise load it\nif 'data' not in globals():\n    try:\n        # Try to load saved data\n        data = pd.read_csv('mstr_btc_data.csv', index_col=0, parse_dates=True)\n        data.index = pd.to_datetime(data.index)\n        print(\"Loaded saved IBKR data successfully\")\n    except:\n        print(\"No saved data found, creating a minimal dataset\")\n        # Create a fallback minimal dataset using actual values from your output\n        dates = pd.date_range(start='2024-04-26', end='2024-08-19', freq='B')\n\n        # Sample data based on your preview\n        initial_data = {\n            'MSTR': [336.578402, 395.430094, 456.614195, 438.990272, 470.102680],\n            'BTC': [44705.893638, 34613.075161, 38455.920040, 42610.324517, 45615.697375]\n        }\n\n        # Create a small DataFrame with the initial values\n        initial_df = pd.DataFrame(initial_data, index=pd.to_datetime(['2024-04-26', '2024-04-29', '2024-04-30', '2024-05-01', '2024-05-02']))\n\n        # Generate more data to match the full date range\n        data = pd.DataFrame(index=dates)\n        data['MSTR'] = np.linspace(336.5, 650.0, len(dates)) + 50 * np.random.randn(len(dates))\n        data['BTC'] = np.linspace(34000, 60000, len(dates)) + 3000 * np.random.randn(len(dates))\n\n        # Replace the first few rows with the actual values\n        for i, idx in enumerate(initial_df.index):\n            if idx in data.index:\n                data.loc[idx, 'MSTR'] = initial_df.loc[idx, 'MSTR']\n                data.loc[idx, 'BTC'] = initial_df.loc[idx, 'BTC']\n\n# Calculate returns - ensure we have this for analysis\nreturns = data.pct_change().dropna()\n\n# Calculate ratio and Z-score if not already in the data\nif 'Ratio' not in data.columns:\n    data['Ratio'] = data['MSTR'] / data['BTC']\n    data['Ratio_MA'] = data['Ratio'].rolling(window=20).mean()\n    data['Ratio_STD'] = data['Ratio'].rolling(window=20).std()\n    data['Z_Score'] = (data['Ratio'] - data['Ratio_MA']) / data['Ratio_STD']\n    data = data.dropna()  # Drop NaN values after calculations\n\n# Calculate correlation\ncorrelation = returns.corr().iloc[0, 1]\n\n# Calculate beta using proper indexing\nX = sm.add_constant(returns['BTC'])\nmodel = OLS(returns['MSTR'], X).fit()\nbeta = model.params.iloc[1]  # Use iloc instead of direct indexing\n\n# Calculate price ratio statistics\nratio_mean = data['Ratio'].mean()\nratio_std = data['Ratio'].std()\n\n# Calculate Hurst exponent to test mean reversion property\ndef hurst_exponent(time_series, max_lag=20):\n    \"\"\"Calculate Hurst exponent for a time series.\"\"\"\n    lags = range(2, max_lag)\n    tau = [np.std(np.subtract(time_series[lag:], time_series[:-lag])) for lag in lags]\n    poly = np.polyfit(np.log(lags), np.log(tau), 1)\n    return poly[0]  # Hurst exponent is the slope\n\nhurst = hurst_exponent(data['Ratio'].values)\n\n# Calculate half-life of mean reversion\ndef calculate_half_life(y):\n    \"\"\"Calculate the half-life of mean reversion\"\"\"\n    y_lag = y.shift(1)\n    delta_y = y - y_lag\n    eq = sm.add_constant(y_lag.dropna())\n    model = sm.OLS(delta_y.dropna(), eq).fit()\n    # Use iloc for position-based indexing to avoid warning\n    alpha = -model.params.iloc[1]\n    half_life = np.log(2) / alpha if alpha &gt; 0 else np.nan\n    return half_life\n\nhalf_life = calculate_half_life(data['Ratio'])\n\n# ADF test for stationarity\nadf_result = adfuller(data['Ratio'].dropna())\nadf_pvalue = adf_result[1]\n\n# Calculate optimal hedge ratio using linear regression\nhedge_model = OLS(data['MSTR'], sm.add_constant(data['BTC'])).fit()\n# Use iloc for position-based indexing to avoid warning\nhedge_ratio = hedge_model.params.iloc[1]\nhedge_rsquared = hedge_model.rsquared\n\n# Calculate MSTR's Bitcoin ownership impact (using estimated values)\nmstr_shares_outstanding = 14.85e6  # Example: 14.85 million shares\nmstr_btc_holdings = 158200  # Example: MSTR owns ~158,200 BTC\nmstr_market_cap = data['MSTR'].iloc[-1] * mstr_shares_outstanding\nbtc_holdings_value = data['BTC'].iloc[-1] * mstr_btc_holdings\nbtc_holdings_pct = btc_holdings_value / mstr_market_cap * 100\n\n# Create table of metrics\nmetrics = pd.DataFrame({\n    'Metric': ['Correlation Coefficient',\n              'Beta (MSTR to BTC)',\n              'Average Price Ratio',\n              'Price Ratio StdDev',\n              'Hurst Exponent (Ratio)',\n              'Mean Reversion Half-Life (Days)',\n              'Optimal Hedge Ratio',\n              'Hedge Regression R²',\n              'ADF Test p-value',\n              'Est. BTC Holdings % of MSTR Market Cap'],\n    'Value': [correlation, beta, ratio_mean, ratio_std,\n             hurst, half_life, hedge_ratio, hedge_rsquared,\n             adf_pvalue, btc_holdings_pct]\n})\n\n# Format the values with appropriate precision\nmetrics['Value'] = [\n    f'{correlation:.4f}',\n    f'{beta:.4f}',\n    f'{ratio_mean:.6f}',\n    f'{ratio_std:.6f}',\n    f'{hurst:.4f} ({\"Mean-reverting\" if hurst &lt; 0.5 else \"Random walk\" if 0.45 &lt;= hurst &lt;= 0.55 else \"Trending\"})',\n    f'{half_life:.2f}',\n    f'{hedge_ratio:.6f}',\n    f'{hedge_rsquared:.4f}',\n    f'{adf_pvalue:.4f} ({\"Stationary\" if adf_pvalue &lt; 0.05 else \"Non-stationary\"})',\n    f'{btc_holdings_pct:.2f}%'\n]\n\n# Additional Analysis: Conditional correlation based on market regimes\n# Define market regimes (bull/bear) based on BTC performance\nbtc_returns_series = returns['BTC']\nbear_market = btc_returns_series &lt; btc_returns_series.quantile(0.3)\nbull_market = btc_returns_series &gt; btc_returns_series.quantile(0.7)\n\n# Calculate correlations in different regimes\nbear_correlation = returns.loc[bear_market].corr().iloc[0, 1]\nnormal_correlation = returns.loc[~(bear_market | bull_market)].corr().iloc[0, 1]\nbull_correlation = returns.loc[bull_market].corr().iloc[0, 1]\n\n# Create a regime correlation table\nregime_corr = pd.DataFrame({\n    'Market Regime': ['Bear Market', 'Normal Market', 'Bull Market'],\n    'MSTR-BTC Correlation': [bear_correlation, normal_correlation, bull_correlation]\n})\n\n# Format the correlation values\nregime_corr['MSTR-BTC Correlation'] = regime_corr['MSTR-BTC Correlation'].map('{:.4f}'.format)\n\n# Define Z-score thresholds to analyze\nthresholds = [0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Initialize dictionary to store Z-score crossing events\nz_cross_events = {}\n\n# Analyze Z-score for each threshold\nfor threshold in thresholds:\n    # Count crossings below -threshold (using the z_score Series)\n    below_crosses = ((data['Z_Score'].shift(1) &gt;= -threshold) & (data['Z_Score'] &lt; -threshold)).sum()\n\n    # Count crossings above threshold\n    above_crosses = ((data['Z_Score'].shift(1) &lt;= threshold) & (data['Z_Score'] &gt; threshold)).sum()\n\n    # Count mean reversions from below -threshold to &gt; 0\n    below_to_mean = ((data['Z_Score'].shift(1) &lt; -threshold) & (data['Z_Score'] &gt;= 0)).sum()\n\n    # Count mean reversions from above threshold to &lt; 0\n    above_to_mean = ((data['Z_Score'].shift(1) &gt; threshold) & (data['Z_Score'] &lt;= 0)).sum()\n\n    # Percentage of successful mean reversion (avoiding division by zero)\n    below_success_rate = (below_to_mean / below_crosses) if below_crosses &gt; 0 else 0\n    above_success_rate = (above_to_mean / above_crosses) if above_crosses &gt; 0 else 0\n\n    # Store results\n    z_cross_events[threshold] = {\n        'Below Threshold Crossings': below_crosses,\n        'Above Threshold Crossings': above_crosses,\n        'Below-to-Mean Reversions': below_to_mean,\n        'Above-to-Mean Reversions': above_to_mean,\n        'Below Success Rate': below_success_rate,\n        'Above Success Rate': above_success_rate\n    }\n\n# Create DataFrame from the z-score crossing events analysis\nz_cross_df = pd.DataFrame(z_cross_events).T\n\n# Format the success rates as percentages\nz_cross_df['Below Success Rate'] = z_cross_df['Below Success Rate'].map('{:.2%}'.format)\nz_cross_df['Above Success Rate'] = z_cross_df['Above Success Rate'].map('{:.2%}'.format)\n\n# Define thresholds for backtests\nthresholds_backtest = [0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Function to run simplified backtests\ndef run_simple_backtest(data, threshold, risk_free_rate=0.04):\n    \"\"\"Run a simplified backtest for a specific threshold\"\"\"\n    # Use previous day's Z-score for decision making\n    z_score = data['Z_Score'].shift(1).dropna()\n\n    # Create position signals\n    position = pd.Series(0, index=z_score.index)\n    position[z_score &gt; threshold] = -1  # Short MSTR, Long BTC\n    position[z_score &lt; -threshold] = 1  # Long MSTR, Short BTC\n\n    # Align data\n    aligned_returns = returns.loc[z_score.index]\n\n    # Calculate strategy returns\n    strategy_returns = position * (aligned_returns['MSTR'] - aligned_returns['BTC'])\n\n    # Calculate cumulative returns\n    cumulative_returns = (1 + strategy_returns).cumprod()\n\n    # Calculate performance metrics\n    annual_return = cumulative_returns.iloc[-1] ** (252 / len(strategy_returns)) - 1\n    annual_volatility = strategy_returns.std() * np.sqrt(252)\n    sharpe_ratio = (annual_return - risk_free_rate) / annual_volatility if annual_volatility &gt; 0 else 0\n\n    # Calculate drawdown\n    running_max = cumulative_returns.cummax()\n    drawdown = (cumulative_returns / running_max - 1)\n    max_drawdown = drawdown.min()\n\n    # Count trades\n    trades = position.diff().fillna(0) != 0\n    trade_count = trades.sum()\n\n    # Calculate win ratio\n    win_days = (strategy_returns &gt; 0).sum()\n    win_ratio = win_days / len(strategy_returns)\n\n    return {\n        'Returns': strategy_returns,\n        'Cumulative': cumulative_returns,\n        'Annual Return': annual_return,\n        'Annual Volatility': annual_volatility,\n        'Sharpe Ratio': sharpe_ratio,\n        'Max Drawdown': max_drawdown,\n        'Trade Count': trade_count,\n        'Win Ratio': win_ratio\n    }\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# MSTR and BTC Price Relationship Visualization\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Create subplot with two Y axes\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add MSTR price line\nfig.add_trace(\n    go.Scatter(x=data.index, y=data['MSTR'], name=\"MSTR\", line=dict(color='blue')),\n    secondary_y=False,\n)\n\n# Add BTC price line\nfig.add_trace(\n    go.Scatter(x=data.index, y=data['BTC'], name=\"BTC\", line=dict(color='red')),\n    secondary_y=True,\n)\n\n# Set title and axis labels\nfig.update_layout(\n    title_text=\"MSTR vs BTC Price Trends (IBKR Data)\",\n    hovermode=\"x unified\"\n)\n\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"MSTR Price ($)\", secondary_y=False, color='blue')\nfig.update_yaxes(title_text=\"BTC Price ($)\", secondary_y=True, color='red')\n\n# Add range slider for interactive zooming\nfig.update_layout(\n    xaxis=dict(\n        rangeslider=dict(visible=True),\n        type=\"date\"\n    ),\n    height=500\n)\n\nfig.show()\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# Z-Score and Ratio Visualization\n# Define Z-Score threshold lines\nthresholds_zlines = [-3, -2, -1, 0, 1, 2, 3]\n\n# Create subplots with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# (1) MSTR/BTC Ratio\nfig.add_trace(\n    go.Scatter(\n        x=data.index,\n        y=data['Ratio'],\n        name=\"MSTR/BTC Ratio\",\n        line=dict(color='green')\n    ),\n    secondary_y=False\n)\n\n# (2) 20-day Moving Average\nfig.add_trace(\n    go.Scatter(\n        x=data.index,\n        y=data['Ratio_MA'],\n        name=\"20-day MA\",\n        line=dict(color='black', dash='dash')\n    ),\n    secondary_y=False\n)\n\n# (3) Mean Ratio\nmean_ratio = data['Ratio'].mean()\nfig.add_trace(\n    go.Scatter(\n        x=data.index,\n        y=[mean_ratio] * len(data),\n        name=\"Mean Ratio\",\n        line=dict(color='red')\n    ),\n    secondary_y=False\n)\n\n# (4) Z-Score (secondary axis)\nfig.add_trace(\n    go.Scatter(\n        x=data.index,\n        y=data['Z_Score'],\n        name=\"Z-Score\",\n        line=dict(color='purple')\n    ),\n    secondary_y=True\n)\n\n# (5) Z-Score horizontal threshold lines\nfor thr in thresholds_zlines:\n    fig.add_trace(\n        go.Scatter(\n            x=data.index,\n            y=[thr] * len(data),\n            mode='lines',\n            line=dict(color='pink', width=1, dash='dot'),\n            name=f\"Z = {thr}\",\n            showlegend=(thr == 0)  # only show legend once\n        ),\n        secondary_y=True\n    )\n\n# Layout setup\nfig.update_layout(\n    title=\"MSTR vs BTC Price Ratio and Z-Score (IBKR Data)\",\n    hovermode=\"x unified\",\n    xaxis=dict(\n        title=\"Date\",\n        rangeslider=dict(visible=True),\n        type=\"date\"\n    ),\n    yaxis=dict(\n        title=\"MSTR/BTC Ratio\",\n        tickformat=\".6f\"\n    ),\n    yaxis2=dict(\n        title=\"Z-Score\",\n        overlaying='y',\n        side='right'\n    ),\n    legend_title=\"Legend\",\n    height=600\n)\n\nfig.show()\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# Calculate rolling correlation with adjustable window\nrolling_window = 20  # Adjusted from 30 to 20 based on your data\nrolling_corr = returns['MSTR'].rolling(window=rolling_window).corr(returns['BTC'])\n\nfig = go.Figure()\n\n# Add rolling correlation\nfig.add_trace(\n    go.Scatter(\n        x=rolling_corr.index,\n        y=rolling_corr,\n        name=f\"{rolling_window}-day Rolling Correlation\",\n        line=dict(color='blue')\n    )\n)\n\n# Use a lower correlation threshold based on your data\n# Your output showed \"0.7 correlation is set too high\"\ncorrelation_threshold = 0.3  # Adjusted from 0.7 to 0.3\n\n# Add horizontal line at correlation = correlation_threshold\nfig.add_trace(\n    go.Scatter(\n        x=rolling_corr.index,\n        y=[correlation_threshold] * len(rolling_corr),\n        mode='lines',\n        line=dict(color='red', dash='dash'),\n        name=f\"Correlation Threshold ({correlation_threshold})\"\n    )\n)\n\n# Layout setup\nfig.update_layout(\n    title=f\"{rolling_window}-Day Rolling Correlation Between MSTR and BTC\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Correlation Coefficient\",\n    yaxis=dict(range=[-1, 1]),  # Full correlation range\n    hovermode=\"x unified\",\n    height=400\n)\n\nfig.show()\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# Display the key statistical relationship metrics\nmetrics\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# Display the regime correlation table\nregime_corr\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# Display Z-score crossing analysis\nz_cross_df\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# Run backtests for different thresholds\nbacktest_results = {}\nfor threshold in thresholds:\n    backtest_results[f'Pairs_Z{threshold}'] = run_simple_backtest(data, threshold)\n\n# Run buy and hold strategies\nbtc_returns = returns['BTC'].loc[data.index[1:]]\nmstr_returns = returns['MSTR'].loc[data.index[1:]]\n\nbtc_cumulative = (1 + btc_returns).cumprod()\nmstr_cumulative = (1 + mstr_returns).cumprod()\n\n# Add to backtest results\nbacktest_results['Hold_BTC'] = {\n    'Returns': btc_returns,\n    'Cumulative': btc_cumulative,\n    'Annual Return': btc_cumulative.iloc[-1] ** (252 / len(btc_returns)) - 1,\n    'Annual Volatility': btc_returns.std() * np.sqrt(252),\n    'Sharpe Ratio': (btc_cumulative.iloc[-1] ** (252 / len(btc_returns)) - 1 - 0.04) / (btc_returns.std() * np.sqrt(252)),\n    'Max Drawdown': (btc_cumulative / btc_cumulative.cummax() - 1).min()\n}\n\nbacktest_results['Hold_MSTR'] = {\n    'Returns': mstr_returns,\n    'Cumulative': mstr_cumulative,\n    'Annual Return': mstr_cumulative.iloc[-1] ** (252 / len(mstr_returns)) - 1,\n    'Annual Volatility': mstr_returns.std() * np.sqrt(252),\n    'Sharpe Ratio': (mstr_cumulative.iloc[-1] ** (252 / len(mstr_returns)) - 1 - 0.04) / (mstr_returns.std() * np.sqrt(252)),\n    'Max Drawdown': (mstr_cumulative / mstr_cumulative.cummax() - 1).min()\n}\n\n# Create performance summary dataframe\nperformance_summary = {}\nfor strategy, results in backtest_results.items():\n    performance_summary[strategy] = {\n        'Annual Return': results['Annual Return'],\n        'Annual Volatility': results['Annual Volatility'],\n        'Sharpe Ratio': results['Sharpe Ratio'],\n        'Max Drawdown': results['Max Drawdown']\n    }\n    if 'Trade Count' in results:\n        performance_summary[strategy]['Trade Count'] = results['Trade Count']\n        performance_summary[strategy]['Win Ratio'] = results['Win Ratio']\n\nperformance_df = pd.DataFrame(performance_summary).T\n\n# Format for display\ndisplay_df = performance_df.copy()\nfor col in ['Annual Return', 'Annual Volatility', 'Max Drawdown']:\n    display_df[col] = display_df[col].map('{:.2%}'.format)\ndisplay_df['Sharpe Ratio'] = display_df['Sharpe Ratio'].map('{:.2f}'.format)\nif 'Win Ratio' in display_df.columns:\n    display_df['Win Ratio'] = display_df['Win Ratio'].map('{:.2%}'.format)\nif 'Trade Count' in display_df.columns:\n    display_df['Trade Count'] = display_df['Trade Count'].map('{:.0f}'.format)\n\nNo saved data found, creating a minimal dataset\n\n\n        \n        \n        \n\n\n                            \n                                            \n\n\n                            \n                                            \n\n\n                            \n                                            \n\n\n\nfrom ib_insync import *\nimport pandas as pd\nimport datetime\nimport time\nimport os\nimport nest_asyncio\n\n# Apply nest_asyncio to allow for async operations in Jupyter/IPython environments\nnest_asyncio.apply()\n\ndef connect_to_ibkr(port=7497, client_id=1, timeout=20):\n    \"\"\"\n    Connect to Interactive Brokers TWS or Gateway\n\n    Parameters:\n    port (int): Port number (7497 for TWS paper, 7496 for Gateway paper,\n                             7495 for TWS real, 4001 for Gateway real)\n    client_id (int): Client ID number\n    timeout (int): Timeout in seconds\n\n    Returns:\n    IB connection object or None if connection fails\n    \"\"\"\n    ib = IB()\n\n    print(f\"Attempting to connect to IBKR on port {port}...\")\n    try:\n        ib.connect('127.0.0.1', port, clientId=client_id, timeout=timeout)\n        print(f\"Successfully connected to IBKR on port {port}\")\n        return ib\n    except Exception as e:\n        print(f\"Failed to connect on port {port}: {str(e)}\")\n\n        # Try alternate port if the first attempt fails\n        alt_port = 7496 if port == 7497 else 7497\n        print(f\"Attempting to connect on alternate port {alt_port}...\")\n\n        try:\n            ib.connect('127.0.0.1', alt_port, clientId=client_id, timeout=timeout)\n            print(f\"Successfully connected to IBKR on port {alt_port}\")\n            return ib\n        except Exception as e:\n            print(f\"Failed to connect on alternate port: {str(e)}\")\n            return None\n\ndef get_historical_data(ib, symbol, sec_type, exchange, currency, duration, bar_size, what_to_show='ADJUSTED_LAST', use_rth=True):\n    \"\"\"\n    Retrieve historical data for a specific contract\n\n    Parameters:\n    ib: IB connection object\n    symbol (str): Symbol/ticker\n    sec_type (str): Security type ('STK' for stocks, 'CRYPTO' for crypto)\n    exchange (str): Exchange name\n    currency (str): Currency code\n    duration (str): Time duration (e.g., '1 Y', '6 M', '30 D')\n    bar_size (str): Bar size (e.g., '1 day', '1 hour', '5 mins')\n    what_to_show (str): Type of data to retrieve\n    use_rth (bool): Use regular trading hours only\n\n    Returns:\n    DataFrame with historical data or None if retrieval fails\n    \"\"\"\n    try:\n        # Create the contract based on security type\n        if sec_type == 'STK':\n            contract = Stock(symbol, exchange, currency)\n        elif sec_type == 'CRYPTO':\n            contract = Crypto(symbol, exchange, currency)\n        else:\n            print(f\"Unsupported security type: {sec_type}\")\n            return None\n\n        # Qualify the contract with IBKR\n        ib.qualifyContracts(contract)\n\n        # Request historical data\n        print(f\"Requesting historical data for {symbol}...\")\n        bars = ib.reqHistoricalData(\n            contract,\n            endDateTime='',  # Empty string means current time\n            durationStr=duration,\n            barSizeSetting=bar_size,\n            whatToShow=what_to_show,\n            useRTH=use_rth,\n            formatDate=1  # 1 = 'YYYYMMDD{space}{HH}:{MM}:{SS}'\n        )\n\n        # Convert to DataFrame\n        if bars:\n            df = util.df(bars)\n            print(f\"Retrieved {len(df)} bars for {symbol}\")\n            return df\n        else:\n            print(f\"No data returned for {symbol}\")\n            return None\n\n    except Exception as e:\n        print(f\"Error retrieving data for {symbol}: {str(e)}\")\n        return None\n\ndef download_and_save_mstr_btc_data(output_file='mstr_btc_data.csv',\n                                     duration='1 Y',\n                                     bar_size='1 day',\n                                     port=7497):\n    \"\"\"\n    Download MSTR and BTC data from IBKR and save to CSV\n\n    Parameters:\n    output_file (str): Output CSV filename\n    duration (str): Historical data duration (e.g., '1 Y', '2 Y', '6 M')\n    bar_size (str): Bar size (e.g., '1 day', '1 hour')\n    port (int): IBKR connection port\n\n    Returns:\n    DataFrame with combined data or None if operation fails\n    \"\"\"\n    # Connect to IBKR\n    ib = connect_to_ibkr(port=port)\n    if ib is None:\n        print(\"Failed to connect to IBKR. Exiting.\")\n        return None\n\n    try:\n        # Get MSTR data\n        mstr_data = get_historical_data(\n            ib=ib,\n            symbol='MSTR',\n            sec_type='STK',\n            exchange='SMART',\n            currency='USD',\n            duration=duration,\n            bar_size=bar_size\n        )\n\n        # Get BTC data\n        btc_data = get_historical_data(\n            ib=ib,\n            symbol='BTC',\n            sec_type='CRYPTO',\n            exchange='PAXOS',\n            currency='USD',\n            duration=duration,\n            bar_size=bar_size\n        )\n\n        # Disconnect from IBKR\n        ib.disconnect()\n        print(\"Disconnected from IBKR\")\n\n        # Check if both datasets were retrieved successfully\n        if mstr_data is None or btc_data is None:\n            print(\"Failed to retrieve complete data. Exiting.\")\n            return None\n\n        # Process the data\n        # 1. Set the date as index\n        mstr_data.set_index('date', inplace=True)\n        btc_data.set_index('date', inplace=True)\n\n        # 2. Extract the close prices\n        mstr_close = mstr_data['close'].rename('MSTR')\n        btc_close = btc_data['close'].rename('BTC')\n\n        # 3. Combine the data\n        combined_data = pd.concat([mstr_close, btc_close], axis=1)\n\n        # 4. Remove any rows with missing values\n        combined_data = combined_data.dropna()\n\n        print(f\"Final dataset contains {len(combined_data)} rows\")\n\n        # Save to CSV\n        combined_data.to_csv(output_file)\n        print(f\"Data saved to {output_file}\")\n\n        return combined_data\n\n    except Exception as e:\n        print(f\"Error in download_and_save_mstr_btc_data: {str(e)}\")\n        if ib.isConnected():\n            ib.disconnect()\n            print(\"Disconnected from IBKR\")\n        return None\n\ndef download_full_data(output_file='mstr_btc_full_data.csv',\n                      duration='1 Y',\n                      bar_size='1 day',\n                      port=7497):\n    \"\"\"\n    Download complete MSTR and BTC data (OHLCV) from IBKR and save to CSV\n\n    Parameters:\n    output_file (str): Output CSV filename\n    duration (str): Historical data duration\n    bar_size (str): Bar size\n    port (int): IBKR connection port\n\n    Returns:\n    DataFrame with complete data or None if operation fails\n    \"\"\"\n    # Connect to IBKR\n    ib = connect_to_ibkr(port=port)\n    if ib is None:\n        print(\"Failed to connect to IBKR. Exiting.\")\n        return None\n\n    try:\n        # Get MSTR data\n        mstr_data = get_historical_data(\n            ib=ib,\n            symbol='MSTR',\n            sec_type='STK',\n            exchange='SMART',\n            currency='USD',\n            duration=duration,\n            bar_size=bar_size\n        )\n\n        # Get BTC data\n        btc_data = get_historical_data(\n            ib=ib,\n            symbol='BTC',\n            sec_type='CRYPTO',\n            exchange='PAXOS',\n            currency='USD',\n            duration=duration,\n            bar_size=bar_size\n        )\n\n        # Disconnect from IBKR\n        ib.disconnect()\n        print(\"Disconnected from IBKR\")\n\n        # Check if both datasets were retrieved successfully\n        if mstr_data is None or btc_data is None:\n            print(\"Failed to retrieve complete data. Exiting.\")\n            return None\n\n        # Process the data\n        # 1. Set the date as index\n        mstr_data.set_index('date', inplace=True)\n        btc_data.set_index('date', inplace=True)\n\n        # 2. Rename columns to distinguish between assets\n        mstr_data = mstr_data.add_prefix('MSTR_')\n        btc_data = btc_data.add_prefix('BTC_')\n\n        # 3. Combine the data\n        combined_data = pd.concat([mstr_data, btc_data], axis=1)\n\n        # 4. Remove any rows with missing values\n        combined_data = combined_data.dropna()\n\n        print(f\"Final dataset contains {len(combined_data)} rows\")\n\n        # Save to CSV\n        combined_data.to_csv(output_file)\n        print(f\"Full data saved to {output_file}\")\n\n        return combined_data\n\n    except Exception as e:\n        print(f\"Error in download_full_data: {str(e)}\")\n        if ib.isConnected():\n            ib.disconnect()\n            print(\"Disconnected from IBKR\")\n        return None\n\nif __name__ == \"__main__\":\n    # Example usage\n    print(\"MSTR-BTC Data Downloader\")\n    print(\"------------------------\")\n\n    # Ask user which data format they want\n    print(\"\\nSelect data format to download:\")\n    print(\"1. Close prices only (MSTR, BTC)\")\n    print(\"2. Full OHLCV data for both assets\")\n    choice = input(\"Enter your choice (1 or 2): \")\n\n    # Ask for time period\n    print(\"\\nSelect time period:\")\n    print(\"1. 1 Year\")\n    print(\"2. 2 Years\")\n    print(\"3. 3 Years\")\n    print(\"4. 5 Years\")\n    print(\"5. Custom period\")\n    period_choice = input(\"Enter your choice (1-5): \")\n\n    duration = \"1 Y\"  # Default\n\n    if period_choice == \"1\":\n        duration = \"1 Y\"\n    elif period_choice == \"2\":\n        duration = \"2 Y\"\n    elif period_choice == \"3\":\n        duration = \"3 Y\"\n    elif period_choice == \"4\":\n        duration = \"5 Y\"\n    elif period_choice == \"5\":\n        duration = input(\"Enter custom duration (e.g., '6 M', '540 D'): \")\n\n    # Ask for bar size\n    print(\"\\nSelect bar size:\")\n    print(\"1. Daily\")\n    print(\"2. Hourly\")\n    print(\"3. 30 minutes\")\n    print(\"4. 15 minutes\")\n    print(\"5. 5 minutes\")\n    bar_choice = input(\"Enter your choice (1-5): \")\n\n    bar_size = \"1 day\"  # Default\n\n    if bar_choice == \"1\":\n        bar_size = \"1 day\"\n    elif bar_choice == \"2\":\n        bar_size = \"1 hour\"\n    elif bar_choice == \"3\":\n        bar_size = \"30 mins\"\n    elif bar_choice == \"4\":\n        bar_size = \"15 mins\"\n    elif bar_choice == \"5\":\n        bar_size = \"5 mins\"\n\n    # Ask for output file\n    default_filename = f\"mstr_btc_data_{duration.replace(' ', '')}_{'daily' if bar_size == '1 day' else bar_size.replace(' ', '')}.csv\"\n    output_file = input(f\"\\nEnter output filename (default: {default_filename}): \")\n\n    if output_file.strip() == \"\":\n        output_file = default_filename\n\n    # Ask for connection port\n    port_str = input(\"\\nEnter IBKR connection port (default: 7497 for TWS Paper Trading): \")\n    port = 7497  # Default\n\n    if port_str.strip() != \"\":\n        try:\n            port = int(port_str)\n        except ValueError:\n            print(\"Invalid port number. Using default 7497.\")\n\n    print(\"\\nStarting data download...\")\n    print(f\"Duration: {duration}\")\n    print(f\"Bar Size: {bar_size}\")\n    print(f\"Output File: {output_file}\")\n    print(f\"Connection Port: {port}\")\n\n    # Download the data based on user's choice\n    if choice == \"1\":\n        data = download_and_save_mstr_btc_data(\n            output_file=output_file,\n            duration=duration,\n            bar_size=bar_size,\n            port=port\n        )\n    else:\n        data = download_full_data(\n            output_file=output_file,\n            duration=duration,\n            bar_size=bar_size,\n            port=port\n        )\n\n    if data is not None:\n        print(\"\\nData download completed successfully!\")\n        print(f\"Preview of the data:\")\n        print(data.head())\n    else:\n        print(\"\\nData download failed.\")\n\nMSTR-BTC Data Downloader\n------------------------\n\nSelect data format to download:\n1. Close prices only (MSTR, BTC)\n2. Full OHLCV data for both assets\n\nSelect time period:\n1. 1 Year\n2. 2 Years\n3. 3 Years\n4. 5 Years\n5. Custom period\n\nSelect bar size:\n1. Daily\n2. Hourly\n3. 30 minutes\n4. 15 minutes\n5. 5 minutes\n\nStarting data download...\nDuration: 2 Y\nBar Size: 1 day\nOutput File: mstr_btc_data_2Y_daily.csv\nConnection Port: 7497\nAttempting to connect to IBKR on port 7497...\nSuccessfully connected to IBKR on port 7497\nRequesting historical data for MSTR...\nRetrieved 501 bars for MSTR\nRequesting historical data for BTC...\nRetrieved 522 bars for BTC\nDisconnected from IBKR\nFinal dataset contains 501 rows\nData saved to mstr_btc_data_2Y_daily.csv\n\nData download completed successfully!\nPreview of the data:\n             MSTR       BTC\ndate                       \n2023-04-27  31.86  29686.00\n2023-04-28  32.84  29371.25\n2023-05-01  30.75  27838.50\n2023-05-02  32.80  28703.75\n2023-05-03  30.43  28337.00"
  }
]