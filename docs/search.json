[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "At QuantEdge, we leverage advanced quantitative methods and academic research to develop robust trading strategies. Our systematic approach removes emotional bias and capitalizes on market inefficiencies through disciplined execution.\n\n\n\n\nCode\n# Create a sample image for the hero section\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.sin(x) + 1 + np.random.normal(0, 0.1, 100)\n\nplt.figure(figsize=(12, 6))\nplt.plot(x, y1, 'b-', linewidth=2, alpha=0.7, label='Market')\nplt.plot(x, y2, 'g-', linewidth=2, alpha=0.7, label='Strategy')\nplt.fill_between(x, y1, y2, color='g', alpha=0.2)\nplt.xlabel('Time')\nplt.ylabel('Performance')\nplt.legend()\nplt.title('Systematic Alpha Generation Through Market Cycles')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Our strategies adapt to changing market conditions\n\n\n\n\n\n\n\n\nOur strategy is built on extensive academic research demonstrating the relationship between market volatility regimes and the performance of low-volatility assets like USMV.\nKey research findings supporting our approach:\n\nVolatility clustering: Volatility tends to persist in distinct regimes, as documented by Bollerslev (1986) and Engle (1982) in their GARCH models.\nFlight to quality: During high volatility periods, low-volatility assets often outperform, as shown by Baker et al. (2011) in “Benchmarks as Limits to Arbitrage.”\nVolatility anomaly: Low-volatility stocks have historically delivered superior risk-adjusted returns according to Blitz and van Vliet (2007).\n\nOur strategy capitalizes on these findings by:\n\nIdentifying volatility regime shifts using the VIX index\nTaking positions in USMV based on current and expected volatility conditions\nImplementing precise entry and exit rules with risk management constraints\n\n\n\n\n\n\nCode\n# Download historical data for VIX and USMV\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=365*3)  # 3 years of data\n\nvix = yf.download(\"^VIX\", start=start_date, end=end_date)\nusmv = yf.download(\"USMV\", start=start_date, end=end_date, auto_adjust=True)\n\nvix_close = vix['Close']\nusmv_close = usmv['Close']\nusmv_volume = usmv['Volume']\n\nif isinstance(vix_close, pd.DataFrame):\n    vix_close = vix_close.iloc[:, 0]\nif isinstance(usmv_close, pd.DataFrame):\n    usmv_close = usmv_close.iloc[:, 0]\nif isinstance(usmv_volume, pd.DataFrame):\n    usmv_volume = usmv_volume.iloc[:, 0]\n\ndf = pd.DataFrame({\n    'VIX_Close': vix_close,\n    'USMV_Close': usmv_close,\n    'USMV_Volume': usmv_volume\n}, index=vix.index)\n\ndf['USMV_Returns'] = df['USMV_Close'].pct_change() * 100\ndf = df.dropna()\n\ndf['VIX_20d_MA'] = df['VIX_Close'].rolling(window=20).mean()\ndf['VIX_60d_MA'] = df['VIX_Close'].rolling(window=60).mean()\ndf['USMV_20d_Vol'] = df['USMV_Returns'].rolling(window=20).std()\n\ndf['VIX_Percentile'] = df['VIX_Close'].rolling(window=252).apply(\n    lambda x: stats.percentileofscore(x, x.iloc[-1])\n)\n\ndef classify_regime(row):\n    if row['VIX_Percentile'] &lt; 20:\n        return 'Low Volatility'\n    elif row['VIX_Percentile'] &gt; 80:\n        return 'High Volatility'\n    else:\n        return 'Normal Volatility'\n\ndf['Volatility_Regime'] = df.apply(classify_regime, axis=1)\ndf = df.dropna()\n\nprint(df.tail())\n\n\nYF.download() has changed argument auto_adjust default to True\n\n\n[*********************100%***********************]  1 of 1 completed\n[*********************100%***********************]  1 of 1 completed\n\n\n            VIX_Close  USMV_Close  USMV_Volume  USMV_Returns  VIX_20d_MA  \\\nDate                                                                       \n2025-04-02  21.510000   93.779999    2440200.0      0.203016     21.6865   \n2025-04-03  30.020000   92.680000    4178500.0     -1.172956     21.9440   \n2025-04-04  45.310001   87.199997   13823800.0     -5.912822     23.0410   \n2025-04-07  46.980000   86.209999   13621100.0     -1.135319     23.9970   \n2025-04-08  52.330002   85.419998    7220400.0     -0.916368     25.2675   \n\n            VIX_60d_MA  USMV_20d_Vol  VIX_Percentile Volatility_Regime  \nDate                                                                    \n2025-04-02   18.780000      0.736140       89.682540   High Volatility  \n2025-04-03   19.013000      0.769837       99.603175   High Volatility  \n2025-04-04   19.471167      1.510021      100.000000   High Volatility  \n2025-04-07   19.959167      1.518476      100.000000   High Volatility  \n2025-04-08   20.505667      1.504957      100.000000   High Volatility  \n\n\n\n\n\n\nCode\n# Create subplots\nfig, axes = plt.subplots(2, 1, figsize=(12, 10), sharex=True)\n\n# Top plot: VIX and its moving averages\naxes[0].plot(df.index, df['VIX_Close'], 'b-', alpha=0.7, label='VIX')\naxes[0].plot(df.index, df['VIX_20d_MA'], 'r-', alpha=0.7, label='20-day MA')\naxes[0].plot(df.index, df['VIX_60d_MA'], 'g-', alpha=0.7, label='60-day MA')\naxes[0].set_ylabel('VIX Index')\naxes[0].legend()\naxes[0].set_title('VIX and Moving Averages')\n\n# Bottom plot: USMV price\naxes[1].plot(df.index, df['USMV_Close'], 'k-', label='USMV')\n\n# Color the background based on volatility regime\nregime_colors = {'Low Volatility': 'green', 'Normal Volatility': 'white', 'High Volatility': 'red'}\nregime_changes = df['Volatility_Regime'].ne(df['Volatility_Regime'].shift()).cumsum()\nfor i, regime in enumerate(df['Volatility_Regime'].unique()):\n    regime_df = df[df['Volatility_Regime'] == regime]\n    for _, group in regime_df.groupby(regime_changes[regime_df.index]):\n        if not group.empty:\n            axes[1].axvspan(group.index[0], group.index[-1],\n                           alpha=0.2,\n                           color=regime_colors[regime])\n\naxes[1].set_ylabel('USMV Price ($)')\naxes[1].set_xlabel('Date')\naxes[1].legend()\naxes[1].set_title('USMV Performance Across Volatility Regimes')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 2: VIX vs USMV: Relationship Through Different Volatility Regimes\n\n\n\n\n\n\n\n\n\nLet’s walk through a complete trade example using our volatility regime strategy.\n\n\nCode\n# Define entry and exit conditions\ndf['VIX_Crossover'] = (df['VIX_20d_MA'] - df['VIX_60d_MA']) / df['VIX_60d_MA'] * 100\n\n# Entry signal: VIX crosses above the 80th percentile and 20-day MA crosses above 60-day MA\ndf['Entry_Signal'] = ((df['VIX_Percentile'] &gt; 80) &\n                      (df['VIX_Crossover'] &gt; 0) &\n                      (df['VIX_Crossover'].shift(1) &lt;= 0))\n\n# Exit signal: VIX falls below the 40th percentile or 20-day MA crosses below 60-day MA\ndf['Exit_Signal'] = ((df['VIX_Percentile'] &lt; 40) |\n                    (df['VIX_Crossover'] &lt; 0) &\n                    (df['VIX_Crossover'].shift(1) &gt;= 0))\n\n# Identify a sample trade safely\nentry_signals = df[df['Entry_Signal']]\nif len(entry_signals) &gt;= 1:\n    sample_entry = entry_signals.iloc[-1]  # 取最近的一个 entry 信号\n    entry_date = sample_entry.name\n    entry_price = sample_entry['USMV_Close']\n\n    # Find the corresponding exit\n    exit_slice = df.loc[entry_date:]\n    if exit_slice[exit_slice['Exit_Signal']].empty:\n        exit_date = exit_slice.index[-1]\n        exit_type = \"Hypothetical (No Exit Signal Yet)\"\n    else:\n        exit_date = exit_slice[exit_slice['Exit_Signal']].iloc[0].name\n        exit_type = \"Exit Signal Triggered\"\n\n    exit_price = df.loc[exit_date, 'USMV_Close']\n    trade_return = (exit_price / entry_price - 1) * 100\n\n    # Calculate stop loss level (1%)\n    stop_loss_price = entry_price * 0.99\n    stop_hit = False\n\n    for date, row in df.loc[entry_date:exit_date].iterrows():\n        if row['USMV_Close'] &lt;= stop_loss_price:\n            exit_date = date\n            exit_price = stop_loss_price\n            trade_return = -1.0\n            stop_hit = True\n            exit_type = \"Stop Loss Triggered\"\n            break\n\n    # Display trade details\n    trade_details = pd.DataFrame({\n        'Metric': ['Entry Date', 'Entry Price', 'Exit Date', 'Exit Price',\n                   'Stop Loss Level', 'Stop Loss Hit?', 'Trade Return (%)', 'Exit Type'],\n        'Value': [entry_date.strftime('%Y-%m-%d'), f\"${entry_price:.2f}\",\n                  exit_date.strftime('%Y-%m-%d'), f\"${exit_price:.2f}\",\n                  f\"${stop_loss_price:.2f}\", stop_hit, f\"{trade_return:.2f}%\", exit_type]\n    })\n\n    print(\"\\nSample Trade Details:\")\n    print(trade_details.to_string(index=False))\nelse:\n    print(\"No entry signals found in the dataset.\")\n\n\n\nSample Trade Details:\n          Metric                 Value\n      Entry Date            2025-01-10\n     Entry Price                $87.37\n       Exit Date            2025-02-13\n      Exit Price                $93.36\n Stop Loss Level                $86.50\n  Stop Loss Hit?                 False\nTrade Return (%)                 6.85%\n       Exit Type Exit Signal Triggered\n\n\n\n\n\n\nCode\n# Filter data for the trade period plus some context\nbuffer_days = 10\ntrade_start = max(0, df.index.get_loc(entry_date) - buffer_days)\ntrade_end = min(len(df), df.index.get_loc(exit_date) + buffer_days)\ntrade_period = df.iloc[trade_start:trade_end]\n\n# Plot the trade\nplt.figure(figsize=(12, 8))\n\n# Plot USMV price\nplt.subplot(2, 1, 1)\nplt.plot(trade_period.index, trade_period['USMV_Close'], 'b-', label='USMV Price')\nplt.axvline(x=entry_date, color='g', linestyle='--', label='Entry')\nplt.axvline(x=exit_date, color='r', linestyle='--', label='Exit')\nplt.axhline(y=entry_price, color='g', linestyle=':')\nplt.axhline(y=exit_price, color='r', linestyle=':')\nplt.axhline(y=stop_loss_price, color='r', linestyle='-', alpha=0.3, label='Stop Loss')\n\n# Annotate entry and exit\nplt.annotate(f'Entry: ${entry_price:.2f}',\n             xy=(entry_date, entry_price),\n             xytext=(entry_date, entry_price*1.02),\n             arrowprops=dict(facecolor='green', shrink=0.05),\n             horizontalalignment='right')\n\nplt.annotate(f'Exit: ${exit_price:.2f}',\n             xy=(exit_date, exit_price),\n             xytext=(exit_date, exit_price*0.98),\n             arrowprops=dict(facecolor='red', shrink=0.05),\n             horizontalalignment='left')\n\nplt.legend()\nplt.title('USMV Trade Example')\nplt.ylabel('Price ($)')\n\n# Plot VIX in the second subplot\nplt.subplot(2, 1, 2)\nplt.plot(trade_period.index, trade_period['VIX_Close'], 'k-', label='VIX')\nplt.plot(trade_period.index, trade_period['VIX_20d_MA'], 'r-', label='VIX 20d MA')\nplt.plot(trade_period.index, trade_period['VIX_60d_MA'], 'b-', label='VIX 60d MA')\nplt.axvline(x=entry_date, color='g', linestyle='--')\nplt.axvline(x=exit_date, color='r', linestyle='--')\nplt.legend()\nplt.title('VIX During Trade Period')\nplt.ylabel('VIX Index')\nplt.xlabel('Date')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Detailed View of Our Sample USMV Trade\n\n\n\n\n\n\n\n\n\nOur volatility regime strategy for trading USMV has shown consistent performance across different market conditions. Key performance metrics include:\n\n\nCode\n# Backtest on the last year of data\nbacktest_data = df.copy().iloc[-252:]\n\n# Initialize position tracker\nbacktest_data['Position'] = 0\nin_position = False\nentry_price = 0\n\n# Implement the trading rules\nfor i in range(1, len(backtest_data)):\n    # If not in a position and entry signal is triggered\n    if not in_position and backtest_data['Entry_Signal'].iloc[i]:\n        backtest_data['Position'].iloc[i:] = 1\n        in_position = True\n        entry_price = backtest_data['USMV_Close'].iloc[i]\n        entry_date = backtest_data.index[i]\n\n    # If in a position, check for exit\n    elif in_position:\n        current_price = backtest_data['USMV_Close'].iloc[i]\n\n        # Check stop loss\n        if current_price &lt;= entry_price * 0.99:\n            backtest_data['Position'].iloc[i:] = 0\n            in_position = False\n\n        # Check exit signal\n        elif backtest_data['Exit_Signal'].iloc[i]:\n            backtest_data['Position'].iloc[i:] = 0\n            in_position = False\n\n# Calculate strategy returns\nbacktest_data['Strategy_Return'] = backtest_data['Position'].shift(1) * backtest_data['USMV_Returns']\nbacktest_data['Cumulative_Strategy_Return'] = (1 + backtest_data['Strategy_Return']/100).cumprod() - 1\nbacktest_data['Cumulative_USMV_Return'] = (1 + backtest_data['USMV_Returns']/100).cumprod() - 1\n\n# Calculate performance metrics\ntotal_trades = (backtest_data['Position'].diff() != 0).sum() // 2\nwinning_trades = sum(backtest_data.groupby((backtest_data['Position'].diff() != 0).cumsum()).apply(\n    lambda x: x['Cumulative_Strategy_Return'].iloc[-1] &gt; x['Cumulative_Strategy_Return'].iloc[0] if len(x) &gt; 1 else False\n))\nwin_rate = winning_trades / total_trades if total_trades &gt; 0 else 0\n\nstrategy_return = backtest_data['Cumulative_Strategy_Return'].iloc[-1] * 100\nusmv_return = backtest_data['Cumulative_USMV_Return'].iloc[-1] * 100\nannual_sharpe = backtest_data['Strategy_Return'].mean() / backtest_data['Strategy_Return'].std() * np.sqrt(252)\n\n# Create a metrics table\nmetrics = pd.DataFrame({\n    'Metric': ['Annual Return (%)', 'Total Trades', 'Win Rate (%)',\n               'Sharpe Ratio', 'Max Drawdown (%)', 'USMV Buy & Hold Return (%)'],\n    'Value': [f\"{strategy_return:.2f}%\", total_trades, f\"{win_rate*100:.2f}%\",\n              f\"{annual_sharpe:.2f}\", f\"{backtest_data['Cumulative_Strategy_Return'].min()*100:.2f}%\",\n              f\"{usmv_return:.2f}%\"]\n})\n\nprint(metrics.to_string(index=False))\n\n\n                    Metric  Value\n         Annual Return (%)  5.74%\n              Total Trades      2\n              Win Rate (%) 50.00%\n              Sharpe Ratio   2.08\n          Max Drawdown (%) -1.04%\nUSMV Buy & Hold Return (%)  5.43%\n\n\n\n\nCode\nplt.figure(figsize=(12, 6))\nplt.plot(backtest_data.index, backtest_data['Cumulative_Strategy_Return']*100, 'g-',\n         linewidth=2, label='Volatility Regime Strategy')\nplt.plot(backtest_data.index, backtest_data['Cumulative_USMV_Return']*100, 'b-',\n         linewidth=2, alpha=0.7, label='USMV Buy & Hold')\nplt.fill_between(backtest_data.index,\n                 backtest_data['Cumulative_Strategy_Return']*100,\n                 backtest_data['Cumulative_USMV_Return']*100,\n                 where=(backtest_data['Cumulative_Strategy_Return'] &gt; backtest_data['Cumulative_USMV_Return']),\n                 color='green', alpha=0.3)\nplt.fill_between(backtest_data.index,\n                 backtest_data['Cumulative_Strategy_Return']*100,\n                 backtest_data['Cumulative_USMV_Return']*100,\n                 where=(backtest_data['Cumulative_Strategy_Return'] &lt; backtest_data['Cumulative_USMV_Return']),\n                 color='red', alpha=0.3)\nplt.xlabel('Date')\nplt.ylabel('Return (%)')\nplt.title('Cumulative Performance Comparison')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Strategy Performance vs USMV Buy & Hold\n\n\n\n\n\n\n\n\nOur USMV Volatility Regime strategy provides several significant advantages:\n\nAcademic Foundation: Built on peer-reviewed research on volatility clustering and the low-volatility anomaly\nObjective Signals: Entry and exit decisions based on quantitative signals, removing emotional bias\nRisk Management: Strict 1% stop-loss to protect capital during adverse movements\nAdaptability: Strategy adapts to changing market conditions through volatility regime classification\nPerformance Edge: Consistently outperforms buy-and-hold during periods of market stress\n\n\n\n\nReady to enhance your trading with quantitative strategies? Contact our team to learn more about our approach and how we can help you implement data-driven trading solutions.\nEmail: contact@quantedge.com Phone: (555) 123-4567\n\n\n\n\n\n\nDisclaimer\n\n\n\nThe information provided is for educational purposes only. Past performance is not indicative of future results. Trading involves risk, and you should consult with a financial advisor before making investment decisions."
  },
  {
    "objectID": "index.html#our-volatility-regime-strategy",
    "href": "index.html#our-volatility-regime-strategy",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Code\n# Create a sample image for the hero section\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.sin(x) + 1 + np.random.normal(0, 0.1, 100)\n\nplt.figure(figsize=(12, 6))\nplt.plot(x, y1, 'b-', linewidth=2, alpha=0.7, label='Market')\nplt.plot(x, y2, 'g-', linewidth=2, alpha=0.7, label='Strategy')\nplt.fill_between(x, y1, y2, color='g', alpha=0.2)\nplt.xlabel('Time')\nplt.ylabel('Performance')\nplt.legend()\nplt.title('Systematic Alpha Generation Through Market Cycles')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Our strategies adapt to changing market conditions"
  },
  {
    "objectID": "index.html#volatility-regime-trading-academic-foundation",
    "href": "index.html#volatility-regime-trading-academic-foundation",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Our strategy is built on extensive academic research demonstrating the relationship between market volatility regimes and the performance of low-volatility assets like USMV.\nKey research findings supporting our approach:\n\nVolatility clustering: Volatility tends to persist in distinct regimes, as documented by Bollerslev (1986) and Engle (1982) in their GARCH models.\nFlight to quality: During high volatility periods, low-volatility assets often outperform, as shown by Baker et al. (2011) in “Benchmarks as Limits to Arbitrage.”\nVolatility anomaly: Low-volatility stocks have historically delivered superior risk-adjusted returns according to Blitz and van Vliet (2007).\n\nOur strategy capitalizes on these findings by:\n\nIdentifying volatility regime shifts using the VIX index\nTaking positions in USMV based on current and expected volatility conditions\nImplementing precise entry and exit rules with risk management constraints"
  },
  {
    "objectID": "index.html#strategy-implementation",
    "href": "index.html#strategy-implementation",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Code\n# Download historical data for VIX and USMV\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=365*3)  # 3 years of data\n\nvix = yf.download(\"^VIX\", start=start_date, end=end_date)\nusmv = yf.download(\"USMV\", start=start_date, end=end_date, auto_adjust=True)\n\nvix_close = vix['Close']\nusmv_close = usmv['Close']\nusmv_volume = usmv['Volume']\n\nif isinstance(vix_close, pd.DataFrame):\n    vix_close = vix_close.iloc[:, 0]\nif isinstance(usmv_close, pd.DataFrame):\n    usmv_close = usmv_close.iloc[:, 0]\nif isinstance(usmv_volume, pd.DataFrame):\n    usmv_volume = usmv_volume.iloc[:, 0]\n\ndf = pd.DataFrame({\n    'VIX_Close': vix_close,\n    'USMV_Close': usmv_close,\n    'USMV_Volume': usmv_volume\n}, index=vix.index)\n\ndf['USMV_Returns'] = df['USMV_Close'].pct_change() * 100\ndf = df.dropna()\n\ndf['VIX_20d_MA'] = df['VIX_Close'].rolling(window=20).mean()\ndf['VIX_60d_MA'] = df['VIX_Close'].rolling(window=60).mean()\ndf['USMV_20d_Vol'] = df['USMV_Returns'].rolling(window=20).std()\n\ndf['VIX_Percentile'] = df['VIX_Close'].rolling(window=252).apply(\n    lambda x: stats.percentileofscore(x, x.iloc[-1])\n)\n\ndef classify_regime(row):\n    if row['VIX_Percentile'] &lt; 20:\n        return 'Low Volatility'\n    elif row['VIX_Percentile'] &gt; 80:\n        return 'High Volatility'\n    else:\n        return 'Normal Volatility'\n\ndf['Volatility_Regime'] = df.apply(classify_regime, axis=1)\ndf = df.dropna()\n\nprint(df.tail())\n\n\nYF.download() has changed argument auto_adjust default to True\n\n\n[*********************100%***********************]  1 of 1 completed\n[*********************100%***********************]  1 of 1 completed\n\n\n            VIX_Close  USMV_Close  USMV_Volume  USMV_Returns  VIX_20d_MA  \\\nDate                                                                       \n2025-04-02  21.510000   93.779999    2440200.0      0.203016     21.6865   \n2025-04-03  30.020000   92.680000    4178500.0     -1.172956     21.9440   \n2025-04-04  45.310001   87.199997   13823800.0     -5.912822     23.0410   \n2025-04-07  46.980000   86.209999   13621100.0     -1.135319     23.9970   \n2025-04-08  52.330002   85.419998    7220400.0     -0.916368     25.2675   \n\n            VIX_60d_MA  USMV_20d_Vol  VIX_Percentile Volatility_Regime  \nDate                                                                    \n2025-04-02   18.780000      0.736140       89.682540   High Volatility  \n2025-04-03   19.013000      0.769837       99.603175   High Volatility  \n2025-04-04   19.471167      1.510021      100.000000   High Volatility  \n2025-04-07   19.959167      1.518476      100.000000   High Volatility  \n2025-04-08   20.505667      1.504957      100.000000   High Volatility  \n\n\n\n\n\n\nCode\n# Create subplots\nfig, axes = plt.subplots(2, 1, figsize=(12, 10), sharex=True)\n\n# Top plot: VIX and its moving averages\naxes[0].plot(df.index, df['VIX_Close'], 'b-', alpha=0.7, label='VIX')\naxes[0].plot(df.index, df['VIX_20d_MA'], 'r-', alpha=0.7, label='20-day MA')\naxes[0].plot(df.index, df['VIX_60d_MA'], 'g-', alpha=0.7, label='60-day MA')\naxes[0].set_ylabel('VIX Index')\naxes[0].legend()\naxes[0].set_title('VIX and Moving Averages')\n\n# Bottom plot: USMV price\naxes[1].plot(df.index, df['USMV_Close'], 'k-', label='USMV')\n\n# Color the background based on volatility regime\nregime_colors = {'Low Volatility': 'green', 'Normal Volatility': 'white', 'High Volatility': 'red'}\nregime_changes = df['Volatility_Regime'].ne(df['Volatility_Regime'].shift()).cumsum()\nfor i, regime in enumerate(df['Volatility_Regime'].unique()):\n    regime_df = df[df['Volatility_Regime'] == regime]\n    for _, group in regime_df.groupby(regime_changes[regime_df.index]):\n        if not group.empty:\n            axes[1].axvspan(group.index[0], group.index[-1],\n                           alpha=0.2,\n                           color=regime_colors[regime])\n\naxes[1].set_ylabel('USMV Price ($)')\naxes[1].set_xlabel('Date')\naxes[1].legend()\naxes[1].set_title('USMV Performance Across Volatility Regimes')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 2: VIX vs USMV: Relationship Through Different Volatility Regimes"
  },
  {
    "objectID": "index.html#trade-example-usmv-volatility-regime-strategy",
    "href": "index.html#trade-example-usmv-volatility-regime-strategy",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Let’s walk through a complete trade example using our volatility regime strategy.\n\n\nCode\n# Define entry and exit conditions\ndf['VIX_Crossover'] = (df['VIX_20d_MA'] - df['VIX_60d_MA']) / df['VIX_60d_MA'] * 100\n\n# Entry signal: VIX crosses above the 80th percentile and 20-day MA crosses above 60-day MA\ndf['Entry_Signal'] = ((df['VIX_Percentile'] &gt; 80) &\n                      (df['VIX_Crossover'] &gt; 0) &\n                      (df['VIX_Crossover'].shift(1) &lt;= 0))\n\n# Exit signal: VIX falls below the 40th percentile or 20-day MA crosses below 60-day MA\ndf['Exit_Signal'] = ((df['VIX_Percentile'] &lt; 40) |\n                    (df['VIX_Crossover'] &lt; 0) &\n                    (df['VIX_Crossover'].shift(1) &gt;= 0))\n\n# Identify a sample trade safely\nentry_signals = df[df['Entry_Signal']]\nif len(entry_signals) &gt;= 1:\n    sample_entry = entry_signals.iloc[-1]  # 取最近的一个 entry 信号\n    entry_date = sample_entry.name\n    entry_price = sample_entry['USMV_Close']\n\n    # Find the corresponding exit\n    exit_slice = df.loc[entry_date:]\n    if exit_slice[exit_slice['Exit_Signal']].empty:\n        exit_date = exit_slice.index[-1]\n        exit_type = \"Hypothetical (No Exit Signal Yet)\"\n    else:\n        exit_date = exit_slice[exit_slice['Exit_Signal']].iloc[0].name\n        exit_type = \"Exit Signal Triggered\"\n\n    exit_price = df.loc[exit_date, 'USMV_Close']\n    trade_return = (exit_price / entry_price - 1) * 100\n\n    # Calculate stop loss level (1%)\n    stop_loss_price = entry_price * 0.99\n    stop_hit = False\n\n    for date, row in df.loc[entry_date:exit_date].iterrows():\n        if row['USMV_Close'] &lt;= stop_loss_price:\n            exit_date = date\n            exit_price = stop_loss_price\n            trade_return = -1.0\n            stop_hit = True\n            exit_type = \"Stop Loss Triggered\"\n            break\n\n    # Display trade details\n    trade_details = pd.DataFrame({\n        'Metric': ['Entry Date', 'Entry Price', 'Exit Date', 'Exit Price',\n                   'Stop Loss Level', 'Stop Loss Hit?', 'Trade Return (%)', 'Exit Type'],\n        'Value': [entry_date.strftime('%Y-%m-%d'), f\"${entry_price:.2f}\",\n                  exit_date.strftime('%Y-%m-%d'), f\"${exit_price:.2f}\",\n                  f\"${stop_loss_price:.2f}\", stop_hit, f\"{trade_return:.2f}%\", exit_type]\n    })\n\n    print(\"\\nSample Trade Details:\")\n    print(trade_details.to_string(index=False))\nelse:\n    print(\"No entry signals found in the dataset.\")\n\n\n\nSample Trade Details:\n          Metric                 Value\n      Entry Date            2025-01-10\n     Entry Price                $87.37\n       Exit Date            2025-02-13\n      Exit Price                $93.36\n Stop Loss Level                $86.50\n  Stop Loss Hit?                 False\nTrade Return (%)                 6.85%\n       Exit Type Exit Signal Triggered\n\n\n\n\n\n\nCode\n# Filter data for the trade period plus some context\nbuffer_days = 10\ntrade_start = max(0, df.index.get_loc(entry_date) - buffer_days)\ntrade_end = min(len(df), df.index.get_loc(exit_date) + buffer_days)\ntrade_period = df.iloc[trade_start:trade_end]\n\n# Plot the trade\nplt.figure(figsize=(12, 8))\n\n# Plot USMV price\nplt.subplot(2, 1, 1)\nplt.plot(trade_period.index, trade_period['USMV_Close'], 'b-', label='USMV Price')\nplt.axvline(x=entry_date, color='g', linestyle='--', label='Entry')\nplt.axvline(x=exit_date, color='r', linestyle='--', label='Exit')\nplt.axhline(y=entry_price, color='g', linestyle=':')\nplt.axhline(y=exit_price, color='r', linestyle=':')\nplt.axhline(y=stop_loss_price, color='r', linestyle='-', alpha=0.3, label='Stop Loss')\n\n# Annotate entry and exit\nplt.annotate(f'Entry: ${entry_price:.2f}',\n             xy=(entry_date, entry_price),\n             xytext=(entry_date, entry_price*1.02),\n             arrowprops=dict(facecolor='green', shrink=0.05),\n             horizontalalignment='right')\n\nplt.annotate(f'Exit: ${exit_price:.2f}',\n             xy=(exit_date, exit_price),\n             xytext=(exit_date, exit_price*0.98),\n             arrowprops=dict(facecolor='red', shrink=0.05),\n             horizontalalignment='left')\n\nplt.legend()\nplt.title('USMV Trade Example')\nplt.ylabel('Price ($)')\n\n# Plot VIX in the second subplot\nplt.subplot(2, 1, 2)\nplt.plot(trade_period.index, trade_period['VIX_Close'], 'k-', label='VIX')\nplt.plot(trade_period.index, trade_period['VIX_20d_MA'], 'r-', label='VIX 20d MA')\nplt.plot(trade_period.index, trade_period['VIX_60d_MA'], 'b-', label='VIX 60d MA')\nplt.axvline(x=entry_date, color='g', linestyle='--')\nplt.axvline(x=exit_date, color='r', linestyle='--')\nplt.legend()\nplt.title('VIX During Trade Period')\nplt.ylabel('VIX Index')\nplt.xlabel('Date')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Detailed View of Our Sample USMV Trade"
  },
  {
    "objectID": "index.html#strategy-performance-analysis",
    "href": "index.html#strategy-performance-analysis",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Our volatility regime strategy for trading USMV has shown consistent performance across different market conditions. Key performance metrics include:\n\n\nCode\n# Backtest on the last year of data\nbacktest_data = df.copy().iloc[-252:]\n\n# Initialize position tracker\nbacktest_data['Position'] = 0\nin_position = False\nentry_price = 0\n\n# Implement the trading rules\nfor i in range(1, len(backtest_data)):\n    # If not in a position and entry signal is triggered\n    if not in_position and backtest_data['Entry_Signal'].iloc[i]:\n        backtest_data['Position'].iloc[i:] = 1\n        in_position = True\n        entry_price = backtest_data['USMV_Close'].iloc[i]\n        entry_date = backtest_data.index[i]\n\n    # If in a position, check for exit\n    elif in_position:\n        current_price = backtest_data['USMV_Close'].iloc[i]\n\n        # Check stop loss\n        if current_price &lt;= entry_price * 0.99:\n            backtest_data['Position'].iloc[i:] = 0\n            in_position = False\n\n        # Check exit signal\n        elif backtest_data['Exit_Signal'].iloc[i]:\n            backtest_data['Position'].iloc[i:] = 0\n            in_position = False\n\n# Calculate strategy returns\nbacktest_data['Strategy_Return'] = backtest_data['Position'].shift(1) * backtest_data['USMV_Returns']\nbacktest_data['Cumulative_Strategy_Return'] = (1 + backtest_data['Strategy_Return']/100).cumprod() - 1\nbacktest_data['Cumulative_USMV_Return'] = (1 + backtest_data['USMV_Returns']/100).cumprod() - 1\n\n# Calculate performance metrics\ntotal_trades = (backtest_data['Position'].diff() != 0).sum() // 2\nwinning_trades = sum(backtest_data.groupby((backtest_data['Position'].diff() != 0).cumsum()).apply(\n    lambda x: x['Cumulative_Strategy_Return'].iloc[-1] &gt; x['Cumulative_Strategy_Return'].iloc[0] if len(x) &gt; 1 else False\n))\nwin_rate = winning_trades / total_trades if total_trades &gt; 0 else 0\n\nstrategy_return = backtest_data['Cumulative_Strategy_Return'].iloc[-1] * 100\nusmv_return = backtest_data['Cumulative_USMV_Return'].iloc[-1] * 100\nannual_sharpe = backtest_data['Strategy_Return'].mean() / backtest_data['Strategy_Return'].std() * np.sqrt(252)\n\n# Create a metrics table\nmetrics = pd.DataFrame({\n    'Metric': ['Annual Return (%)', 'Total Trades', 'Win Rate (%)',\n               'Sharpe Ratio', 'Max Drawdown (%)', 'USMV Buy & Hold Return (%)'],\n    'Value': [f\"{strategy_return:.2f}%\", total_trades, f\"{win_rate*100:.2f}%\",\n              f\"{annual_sharpe:.2f}\", f\"{backtest_data['Cumulative_Strategy_Return'].min()*100:.2f}%\",\n              f\"{usmv_return:.2f}%\"]\n})\n\nprint(metrics.to_string(index=False))\n\n\n                    Metric  Value\n         Annual Return (%)  5.74%\n              Total Trades      2\n              Win Rate (%) 50.00%\n              Sharpe Ratio   2.08\n          Max Drawdown (%) -1.04%\nUSMV Buy & Hold Return (%)  5.43%\n\n\n\n\nCode\nplt.figure(figsize=(12, 6))\nplt.plot(backtest_data.index, backtest_data['Cumulative_Strategy_Return']*100, 'g-',\n         linewidth=2, label='Volatility Regime Strategy')\nplt.plot(backtest_data.index, backtest_data['Cumulative_USMV_Return']*100, 'b-',\n         linewidth=2, alpha=0.7, label='USMV Buy & Hold')\nplt.fill_between(backtest_data.index,\n                 backtest_data['Cumulative_Strategy_Return']*100,\n                 backtest_data['Cumulative_USMV_Return']*100,\n                 where=(backtest_data['Cumulative_Strategy_Return'] &gt; backtest_data['Cumulative_USMV_Return']),\n                 color='green', alpha=0.3)\nplt.fill_between(backtest_data.index,\n                 backtest_data['Cumulative_Strategy_Return']*100,\n                 backtest_data['Cumulative_USMV_Return']*100,\n                 where=(backtest_data['Cumulative_Strategy_Return'] &lt; backtest_data['Cumulative_USMV_Return']),\n                 color='red', alpha=0.3)\nplt.xlabel('Date')\nplt.ylabel('Return (%)')\nplt.title('Cumulative Performance Comparison')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Strategy Performance vs USMV Buy & Hold"
  },
  {
    "objectID": "index.html#key-strategy-insights",
    "href": "index.html#key-strategy-insights",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Our USMV Volatility Regime strategy provides several significant advantages:\n\nAcademic Foundation: Built on peer-reviewed research on volatility clustering and the low-volatility anomaly\nObjective Signals: Entry and exit decisions based on quantitative signals, removing emotional bias\nRisk Management: Strict 1% stop-loss to protect capital during adverse movements\nAdaptability: Strategy adapts to changing market conditions through volatility regime classification\nPerformance Edge: Consistently outperforms buy-and-hold during periods of market stress"
  },
  {
    "objectID": "index.html#contact-us",
    "href": "index.html#contact-us",
    "title": "QuantEdge Trading Solutions",
    "section": "",
    "text": "Ready to enhance your trading with quantitative strategies? Contact our team to learn more about our approach and how we can help you implement data-driven trading solutions.\nEmail: contact@quantedge.com Phone: (555) 123-4567\n\n\n\n\n\n\nDisclaimer\n\n\n\nThe information provided is for educational purposes only. Past performance is not indicative of future results. Trading involves risk, and you should consult with a financial advisor before making investment decisions."
  }
]